/*
 * Uart_App.c
 *
 *  Created on: Jun 27, 2020
 *      Author: HYJ
 */

#include "Uart_App.h"

extern UART_HandleTypeDef huart1;

u8 aRxBuffer[1]; //HAL库使用的串口接收缓冲
struct UART_COMMON *uart1_common;
void uart_init(struct UART_COMMON *this, u8 port)
{
	if(port==EN_USART1){
		this=(*UART_COMMON)calloc(1,sizeof(UART_COMMON));
		MX_USART1_UART_Init();
	this->uart_handle=huart1;
	this->uprintf=uart_printf;}
}

void uart_printf(struct UART_COMMON *this,char *fmt, ...) {			//通过任意串口发送字符串
	u16 i;
	va_list ap;
	va_start(ap, fmt);
	vsprintf((char*) this->tx_buf, fmt, ap);
	va_end(ap);
	i = strlen((const char*) this->tx_buf);		//此次发送数据的长度
	HAL_UART_Transmit(&this->uart_handle, (uint8_t*) this->tx_buf, i, 0xffff);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART1) //如果是串口1
	{
		if (((uart1_common->rx_flag) & 0x80) == 0) //接收未完成
				{
			if ((uart1_common->rx_flag) & 0x40) //接收到了0x0d
					{
				if (aRxBuffer[0] != 0x0a)
					uart1_message.USART_RX_STA = 0; //接收错误,重新开始
				else
					uart1_message.USART_RX_STA |= 0x8000;	//接收完成了
			} else //还没收到0X0D
			{
				if (aRxBuffer[0] == 0x0d)
					uart1_message.USART_RX_STA |= 0x4000;
				else {
					uart1_message.USART_RX_BUF[uart1_message.USART_RX_STA
							& 0X3FFF] = aRxBuffer[0];
					uart1_message.USART_RX_STA++;
					if (uart1_message.USART_RX_STA > (64 - 1))
						uart1_message.USART_RX_STA = 0; //接收数据错误,重新开始接收
				}
			}
		}
	}
}
