
Uart_Echo_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aec  08002aec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002aec  08002aec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aec  08002aec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002b64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002b64  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008feb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000199e  00000000  00000000  00029084  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  0002aa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d8  00000000  00000000  0002b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000164c1  00000000  00000000  0002b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075d9  00000000  00000000  00041b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078e64  00000000  00000000  0004914a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1fae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb8  00000000  00000000  000c202c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002a74 	.word	0x08002a74

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002a74 	.word	0x08002a74

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <MX_GPIO_Init+0x28>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a07      	ldr	r2, [pc, #28]	; (800025c <MX_GPIO_Init+0x28>)
 8000240:	f043 0304 	orr.w	r3, r3, #4
 8000244:	6193      	str	r3, [r2, #24]
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <MX_GPIO_Init+0x28>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	f003 0304 	and.w	r3, r3, #4
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b0a0      	sub	sp, #128	; 0x80
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	u8 uart_rec_str[128]={0};
 8000266:	463b      	mov	r3, r7
 8000268:	2280      	movs	r2, #128	; 0x80
 800026a:	2100      	movs	r1, #0
 800026c:	4618      	mov	r0, r3
 800026e:	f001 ffd1 	bl	8002214 <memset>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 faf7 	bl	8000864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f837 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f7ff ffdb 	bl	8000234 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800027e:	f000 f93b 	bl	80004f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Uart_init(uart1_common,EN_USART1);		//初始化串口一 注册相关成员函数
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <main+0x84>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2101      	movs	r1, #1
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fa2f 	bl	80006ec <Uart_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(uart1_common->rx_flag)		//接收完成
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <main+0x84>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0f9      	beq.n	800028e <main+0x2e>
	  {
		  uart1_common->rx_buf[uart1_common->rx_len]=0;
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <main+0x84>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <main+0x84>)
 80002a0:	6812      	ldr	r2, [r2, #0]
 80002a2:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80002a6:	4413      	add	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		  sprintf((char*)uart_rec_str,"%s",uart1_common->rx_buf);
 80002ae:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <main+0x84>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80002b6:	463b      	mov	r3, r7
 80002b8:	4611      	mov	r1, r2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 f82a 	bl	8002314 <strcpy>
		  uart1_common->UPrintf(uart1_common,(char*)uart_rec_str);		//回环
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <main+0x84>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80002c8:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <main+0x84>)
 80002ca:	6812      	ldr	r2, [r2, #0]
 80002cc:	4639      	mov	r1, r7
 80002ce:	4610      	mov	r0, r2
 80002d0:	4798      	blx	r3
		  uart1_common->UClearRec(uart1_common);								//重新开始下次接收
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <main+0x84>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80002da:	4a02      	ldr	r2, [pc, #8]	; (80002e4 <main+0x84>)
 80002dc:	6812      	ldr	r2, [r2, #0]
 80002de:	4610      	mov	r0, r2
 80002e0:	4798      	blx	r3
	  if(uart1_common->rx_flag)		//接收完成
 80002e2:	e7d4      	b.n	800028e <main+0x2e>
 80002e4:	200000dc 	.word	0x200000dc

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 ff8c 	bl	8002214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2301      	movs	r3, #1
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	2302      	movs	r3, #2
 800031e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000326:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0318 	add.w	r3, r7, #24
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fe79 	bl	8001028 <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033c:	f000 f819 	bl	8000372 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	2302      	movs	r3, #2
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2102      	movs	r1, #2
 800035a:	4618      	mov	r0, r3
 800035c:	f001 f8e4 	bl	8001528 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000366:	f000 f804 	bl	8000372 <Error_Handler>
  }
}
 800036a:	bf00      	nop
 800036c:	3740      	adds	r7, #64	; 0x40
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
	...

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a14      	ldr	r2, [pc, #80]	; (80003dc <HAL_MspInit+0x5c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <HAL_MspInit+0x5c>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <HAL_MspInit+0x60>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_MspInit+0x60>)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010000 	.word	0x40010000

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr

080003f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <HardFault_Handler+0x4>

080003f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <MemManage_Handler+0x4>

080003fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <BusFault_Handler+0x4>

08000402 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <UsageFault_Handler+0x4>

08000408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000430:	f000 fa5e 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}

08000438 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <_sbrk+0x50>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d102      	bne.n	800044e <_sbrk+0x16>
		heap_end = &end;
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <_sbrk+0x50>)
 800044a:	4a10      	ldr	r2, [pc, #64]	; (800048c <_sbrk+0x54>)
 800044c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <_sbrk+0x50>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <_sbrk+0x50>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4413      	add	r3, r2
 800045c:	466a      	mov	r2, sp
 800045e:	4293      	cmp	r3, r2
 8000460:	d907      	bls.n	8000472 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000462:	f001 fead 	bl	80021c0 <__errno>
 8000466:	4602      	mov	r2, r0
 8000468:	230c      	movs	r3, #12
 800046a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	e006      	b.n	8000480 <_sbrk+0x48>
	}

	heap_end += incr;
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <_sbrk+0x50>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	4a03      	ldr	r2, [pc, #12]	; (8000488 <_sbrk+0x50>)
 800047c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800047e:	68fb      	ldr	r3, [r7, #12]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	2000008c 	.word	0x2000008c
 800048c:	200000e8 	.word	0x200000e8

08000490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <SystemInit+0x5c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <SystemInit+0x5c>)
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <SystemInit+0x5c>)
 80004a2:	685a      	ldr	r2, [r3, #4]
 80004a4:	4911      	ldr	r1, [pc, #68]	; (80004ec <SystemInit+0x5c>)
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <SystemInit+0x60>)
 80004a8:	4013      	ands	r3, r2
 80004aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <SystemInit+0x5c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <SystemInit+0x5c>)
 80004b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <SystemInit+0x5c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <SystemInit+0x5c>)
 80004c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <SystemInit+0x5c>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <SystemInit+0x5c>)
 80004ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <SystemInit+0x5c>)
 80004d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <SystemInit+0x64>)
 80004de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000
 80004f0:	f8ff0000 	.word	0xf8ff0000
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 80004fe:	4a12      	ldr	r2, [pc, #72]	; (8000548 <MX_USART1_UART_Init+0x50>)
 8000500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_USART1_UART_Init+0x4c>)
 8000530:	f001 f996 	bl	8001860 <HAL_UART_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800053a:	f7ff ff1a 	bl	8000372 <Error_Handler>
  }

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000098 	.word	0x20000098
 8000548:	40013800 	.word	0x40013800

0800054c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a23      	ldr	r2, [pc, #140]	; (80005f4 <HAL_UART_MspInit+0xa8>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d13e      	bne.n	80005ea <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <HAL_UART_MspInit+0xac>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <HAL_UART_MspInit+0xac>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <HAL_UART_MspInit+0xac>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <HAL_UART_MspInit+0xac>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <HAL_UART_MspInit+0xac>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <HAL_UART_MspInit+0xac>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800059c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	4812      	ldr	r0, [pc, #72]	; (80005fc <HAL_UART_MspInit+0xb0>)
 80005b2:	f000 fbcf 	bl	8000d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4619      	mov	r1, r3
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <HAL_UART_MspInit+0xb0>)
 80005cc:	f000 fbc2 	bl	8000d54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	2025      	movs	r0, #37	; 0x25
 80005d6:	f000 fa7e 	bl	8000ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005da:	2025      	movs	r0, #37	; 0x25
 80005dc:	f000 fa97 	bl	8000b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_UART_Receive_IT(&huart1, (u8*) aRxBuffer, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	4907      	ldr	r1, [pc, #28]	; (8000600 <HAL_UART_MspInit+0xb4>)
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <HAL_UART_MspInit+0xb8>)
 80005e6:	f001 fa21 	bl	8001a2c <HAL_UART_Receive_IT>
  /* USER CODE END USART1_MspInit 1 */
  }
}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40013800 	.word	0x40013800
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800
 8000600:	200000d8 	.word	0x200000d8
 8000604:	20000098 	.word	0x20000098

08000608 <USART1_IRQHandler>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	u32 timeout = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
	u32 maxDelay = 0x1FFFF;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <USART1_IRQHandler+0x68>)
 8000614:	603b      	str	r3, [r7, #0]
#if SYSTEM_SUPPORT_OS	 	//使用OS
		OSIntEnter();
	#endif

	HAL_UART_IRQHandler(&huart1);	//调用HAL库中断处理公用函数
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <USART1_IRQHandler+0x6c>)
 8000618:	f001 fa5c 	bl	8001ad4 <HAL_UART_IRQHandler>

	timeout = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)	//等待就绪
 8000620:	e006      	b.n	8000630 <USART1_IRQHandler+0x28>
	{
		timeout++;	////超时处理
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
		if (timeout > maxDelay)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d806      	bhi.n	800063e <USART1_IRQHandler+0x36>
	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)	//等待就绪
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <USART1_IRQHandler+0x6c>)
 8000632:	f001 fb5d 	bl	8001cf0 <HAL_UART_GetState>
 8000636:	4603      	mov	r3, r0
 8000638:	2b20      	cmp	r3, #32
 800063a:	d1f2      	bne.n	8000622 <USART1_IRQHandler+0x1a>
 800063c:	e000      	b.n	8000640 <USART1_IRQHandler+0x38>
			break;
 800063e:	bf00      	nop
	}

	timeout = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
	while (HAL_UART_Receive_IT(&huart1, (u8*) aRxBuffer, 1) != HAL_OK)//一次处理完成之后，重新开启中断并设置RxXferCount为1
 8000644:	e006      	b.n	8000654 <USART1_IRQHandler+0x4c>
	{
		timeout++; //超时处理
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
		if (timeout > maxDelay)
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	429a      	cmp	r2, r3
 8000652:	d808      	bhi.n	8000666 <USART1_IRQHandler+0x5e>
	while (HAL_UART_Receive_IT(&huart1, (u8*) aRxBuffer, 1) != HAL_OK)//一次处理完成之后，重新开启中断并设置RxXferCount为1
 8000654:	2201      	movs	r2, #1
 8000656:	4908      	ldr	r1, [pc, #32]	; (8000678 <USART1_IRQHandler+0x70>)
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <USART1_IRQHandler+0x6c>)
 800065a:	f001 f9e7 	bl	8001a2c <HAL_UART_Receive_IT>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1f0      	bne.n	8000646 <USART1_IRQHandler+0x3e>
			break;
	}
}
 8000664:	e000      	b.n	8000668 <USART1_IRQHandler+0x60>
			break;
 8000666:	bf00      	nop
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	0001ffff 	.word	0x0001ffff
 8000674:	20000098 	.word	0x20000098
 8000678:	200000d8 	.word	0x200000d8

0800067c <uart_clear_rec>:


void uart_clear_rec(struct UART_COMMON *this)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	this->rx_flag=0;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->rx_len=0;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2200      	movs	r2, #0
 8000690:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <uart_printf>:

void uart_printf(struct UART_COMMON *this,char *fmt, ...) {			//通过任意串口发送字符串
 800069e:	b40e      	push	{r1, r2, r3}
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	u16 i;
	va_list ap;
	va_start(ap, fmt);
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	60bb      	str	r3, [r7, #8]
	vsprintf((char*) this->tx_buf, fmt, ap);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	33c4      	adds	r3, #196	; 0xc4
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	69f9      	ldr	r1, [r7, #28]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fe4a 	bl	8002350 <vsiprintf>
	va_end(ap);
	i = strlen((const char*) this->tx_buf);		//此次发送数据的长度
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	33c4      	adds	r3, #196	; 0xc4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fdaf 	bl	8000224 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&this->uart_handle, (uint8_t*) this->tx_buf, i, 0xffff);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
 80006d2:	89fa      	ldrh	r2, [r7, #14]
 80006d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d8:	f001 f90f 	bl	80018fa <HAL_UART_Transmit>
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006e6:	b003      	add	sp, #12
 80006e8:	4770      	bx	lr
	...

080006ec <Uart_init>:

void Uart_init(struct UART_COMMON *this, u8 port)						//串口的初始化与相关函数注册
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	if(port==EN_USART1){
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d11e      	bne.n	800073c <Uart_init+0x50>
		this=(struct UART_COMMON*)calloc(1,sizeof(struct UART_COMMON));
 80006fe:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8000702:	2001      	movs	r0, #1
 8000704:	f001 fd54 	bl	80021b0 <calloc>
 8000708:	4603      	mov	r3, r0
 800070a:	607b      	str	r3, [r7, #4]
		MX_USART1_UART_Init();
 800070c:	f7ff fef4 	bl	80004f8 <MX_USART1_UART_Init>
		this->uart_handle=huart1;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <Uart_init+0x58>)
 8000714:	461c      	mov	r4, r3
 8000716:	4615      	mov	r5, r2
 8000718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		this->UClearRec=uart_clear_rec;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a06      	ldr	r2, [pc, #24]	; (8000748 <Uart_init+0x5c>)
 8000730:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		this->UPrintf=uart_printf;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <Uart_init+0x60>)
 8000738:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bdb0      	pop	{r4, r5, r7, pc}
 8000744:	20000098 	.word	0x20000098
 8000748:	0800067d 	.word	0x0800067d
 800074c:	0800069f 	.word	0x0800069f

08000750 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) //如果是串口1
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a2b      	ldr	r2, [pc, #172]	; (800080c <HAL_UART_RxCpltCallback+0xbc>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d14f      	bne.n	8000802 <HAL_UART_RxCpltCallback+0xb2>
	{
		if (((uart1_common->rx_flag) & 0x80) == 0) //接收未完成
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800076a:	b25b      	sxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	db48      	blt.n	8000802 <HAL_UART_RxCpltCallback+0xb2>
				{
			if ((uart1_common->rx_flag) & 0x40) //接收到了0x0d
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077c:	2b00      	cmp	r3, #0
 800077e:	d015      	beq.n	80007ac <HAL_UART_RxCpltCallback+0x5c>
					{
				if (aRxBuffer[0] != 0x0a)
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <HAL_UART_RxCpltCallback+0xc4>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b0a      	cmp	r3, #10
 8000786:	d005      	beq.n	8000794 <HAL_UART_RxCpltCallback+0x44>
				{
					uart_clear_rec(uart1_common); //接收错误,重新开始
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff75 	bl	800067c <uart_clear_rec>
					}
				}
			}
		}
	}
}
 8000792:	e036      	b.n	8000802 <HAL_UART_RxCpltCallback+0xb2>
					uart1_common->rx_flag |= 0x80;	//接收完成了
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80007aa:	e02a      	b.n	8000802 <HAL_UART_RxCpltCallback+0xb2>
				if (aRxBuffer[0] == 0x0d)
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <HAL_UART_RxCpltCallback+0xc4>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b0d      	cmp	r3, #13
 80007b2:	d10b      	bne.n	80007cc <HAL_UART_RxCpltCallback+0x7c>
					uart1_common->rx_flag |= 0x40;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80007ca:	e01a      	b.n	8000802 <HAL_UART_RxCpltCallback+0xb2>
					uart1_common->rx_buf[uart1_common->rx_len++] = aRxBuffer[0];
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 80007ce:	6819      	ldr	r1, [r3, #0]
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80007d8:	1c50      	adds	r0, r2, #1
 80007da:	b280      	uxth	r0, r0
 80007dc:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
 80007e0:	4610      	mov	r0, r2
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_UART_RxCpltCallback+0xc4>)
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	180b      	adds	r3, r1, r0
 80007e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					if (uart1_common->rx_len > (MAX_RX_LENGTH - 1))
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80007f4:	2b7f      	cmp	r3, #127	; 0x7f
 80007f6:	d904      	bls.n	8000802 <HAL_UART_RxCpltCallback+0xb2>
						uart_clear_rec(uart1_common);	//接收错误,重新开始
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_UART_RxCpltCallback+0xc0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff3d 	bl	800067c <uart_clear_rec>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40013800 	.word	0x40013800
 8000810:	200000dc 	.word	0x200000dc
 8000814:	200000d8 	.word	0x200000d8

08000818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000818:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800081a:	e003      	b.n	8000824 <LoopCopyDataInit>

0800081c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800081e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000820:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000822:	3104      	adds	r1, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000824:	480a      	ldr	r0, [pc, #40]	; (8000850 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000828:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800082c:	d3f6      	bcc.n	800081c <CopyDataInit>
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000830:	e002      	b.n	8000838 <LoopFillZerobss>

08000832 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000834:	f842 3b04 	str.w	r3, [r2], #4

08000838 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800083c:	d3f9      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800083e:	f7ff fe27 	bl	8000490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f001 fcc3 	bl	80021cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fd0b 	bl	8000260 <main>
  bx lr
 800084a:	4770      	bx	lr
  ldr r3, =_sidata
 800084c:	08002af4 	.word	0x08002af4
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000854:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000858:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800085c:	200000e8 	.word	0x200000e8

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>
	...

08000864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_Init+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_Init+0x28>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f923 	bl	8000ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 f808 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff fd7e 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x54>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f93b 	bl	8000b2a <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f903 	bl	8000ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <HAL_InitTick+0x5c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x1c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x20>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a03      	ldr	r2, [pc, #12]	; (8000910 <HAL_IncTick+0x20>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000008 	.word	0x20000008
 8000910:	200000e0 	.word	0x200000e0

08000914 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <HAL_GetTick+0x10>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	200000e0 	.word	0x200000e0

08000928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <__NVIC_GetPriorityGrouping+0x18>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	f003 0307 	and.w	r3, r3, #7
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	db0b      	blt.n	80009b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	f003 021f 	and.w	r2, r3, #31
 80009a4:	4906      	ldr	r1, [pc, #24]	; (80009c0 <__NVIC_EnableIRQ+0x34>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	095b      	lsrs	r3, r3, #5
 80009ac:	2001      	movs	r0, #1
 80009ae:	fa00 f202 	lsl.w	r2, r0, r2
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	; (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a8c:	d301      	bcc.n	8000a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00f      	b.n	8000ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <SysTick_Config+0x40>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f7ff ff90 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SysTick_Config+0x40>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <SysTick_Config+0x40>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff2d 	bl	8000928 <__NVIC_SetPriorityGrouping>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff42 	bl	8000970 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff90 	bl	8000a18 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5f 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff35 	bl	800098c <__NVIC_EnableIRQ>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ffa2 	bl	8000a7c <SysTick_Config>
 8000b38:	4603      	mov	r3, r0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d005      	beq.n	8000b66 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e0d6      	b.n	8000d14 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 020e 	bic.w	r2, r2, #14
 8000b74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0201 	bic.w	r2, r2, #1
 8000b84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b64      	ldr	r3, [pc, #400]	; (8000d20 <HAL_DMA_Abort_IT+0x1dc>)
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d958      	bls.n	8000c44 <HAL_DMA_Abort_IT+0x100>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a63      	ldr	r2, [pc, #396]	; (8000d24 <HAL_DMA_Abort_IT+0x1e0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d04f      	beq.n	8000c3c <HAL_DMA_Abort_IT+0xf8>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a61      	ldr	r2, [pc, #388]	; (8000d28 <HAL_DMA_Abort_IT+0x1e4>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d048      	beq.n	8000c38 <HAL_DMA_Abort_IT+0xf4>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a60      	ldr	r2, [pc, #384]	; (8000d2c <HAL_DMA_Abort_IT+0x1e8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d040      	beq.n	8000c32 <HAL_DMA_Abort_IT+0xee>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a5e      	ldr	r2, [pc, #376]	; (8000d30 <HAL_DMA_Abort_IT+0x1ec>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d038      	beq.n	8000c2c <HAL_DMA_Abort_IT+0xe8>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a5d      	ldr	r2, [pc, #372]	; (8000d34 <HAL_DMA_Abort_IT+0x1f0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d030      	beq.n	8000c26 <HAL_DMA_Abort_IT+0xe2>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a5b      	ldr	r2, [pc, #364]	; (8000d38 <HAL_DMA_Abort_IT+0x1f4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d028      	beq.n	8000c20 <HAL_DMA_Abort_IT+0xdc>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a53      	ldr	r2, [pc, #332]	; (8000d20 <HAL_DMA_Abort_IT+0x1dc>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d020      	beq.n	8000c1a <HAL_DMA_Abort_IT+0xd6>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a57      	ldr	r2, [pc, #348]	; (8000d3c <HAL_DMA_Abort_IT+0x1f8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d019      	beq.n	8000c16 <HAL_DMA_Abort_IT+0xd2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a56      	ldr	r2, [pc, #344]	; (8000d40 <HAL_DMA_Abort_IT+0x1fc>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d012      	beq.n	8000c12 <HAL_DMA_Abort_IT+0xce>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a54      	ldr	r2, [pc, #336]	; (8000d44 <HAL_DMA_Abort_IT+0x200>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d00a      	beq.n	8000c0c <HAL_DMA_Abort_IT+0xc8>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a53      	ldr	r2, [pc, #332]	; (8000d48 <HAL_DMA_Abort_IT+0x204>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d102      	bne.n	8000c06 <HAL_DMA_Abort_IT+0xc2>
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	e01b      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0a:	e018      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c10:	e015      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c12:	2310      	movs	r3, #16
 8000c14:	e013      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e011      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c1e:	e00e      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c24:	e00b      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2a:	e008      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c30:	e005      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c36:	e002      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c38:	2310      	movs	r3, #16
 8000c3a:	e000      	b.n	8000c3e <HAL_DMA_Abort_IT+0xfa>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <HAL_DMA_Abort_IT+0x208>)
 8000c40:	6053      	str	r3, [r2, #4]
 8000c42:	e057      	b.n	8000cf4 <HAL_DMA_Abort_IT+0x1b0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <HAL_DMA_Abort_IT+0x1e0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d04f      	beq.n	8000cee <HAL_DMA_Abort_IT+0x1aa>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <HAL_DMA_Abort_IT+0x1e4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d048      	beq.n	8000cea <HAL_DMA_Abort_IT+0x1a6>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a33      	ldr	r2, [pc, #204]	; (8000d2c <HAL_DMA_Abort_IT+0x1e8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d040      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0x1a0>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <HAL_DMA_Abort_IT+0x1ec>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d038      	beq.n	8000cde <HAL_DMA_Abort_IT+0x19a>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <HAL_DMA_Abort_IT+0x1f0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d030      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x194>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a2f      	ldr	r2, [pc, #188]	; (8000d38 <HAL_DMA_Abort_IT+0x1f4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d028      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x18e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <HAL_DMA_Abort_IT+0x1dc>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d020      	beq.n	8000ccc <HAL_DMA_Abort_IT+0x188>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a2b      	ldr	r2, [pc, #172]	; (8000d3c <HAL_DMA_Abort_IT+0x1f8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d019      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0x184>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a29      	ldr	r2, [pc, #164]	; (8000d40 <HAL_DMA_Abort_IT+0x1fc>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d012      	beq.n	8000cc4 <HAL_DMA_Abort_IT+0x180>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <HAL_DMA_Abort_IT+0x200>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d00a      	beq.n	8000cbe <HAL_DMA_Abort_IT+0x17a>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a26      	ldr	r2, [pc, #152]	; (8000d48 <HAL_DMA_Abort_IT+0x204>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d102      	bne.n	8000cb8 <HAL_DMA_Abort_IT+0x174>
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	e01b      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbc:	e018      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc2:	e015      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	e013      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e011      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd0:	e00e      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000cd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cd6:	e00b      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	e008      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce2:	e005      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce8:	e002      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000cea:	2310      	movs	r3, #16
 8000cec:	e000      	b.n	8000cf0 <HAL_DMA_Abort_IT+0x1ac>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_DMA_Abort_IT+0x20c>)
 8000cf2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	4798      	blx	r3
    } 
  }
  return status;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020080 	.word	0x40020080
 8000d24:	40020008 	.word	0x40020008
 8000d28:	4002001c 	.word	0x4002001c
 8000d2c:	40020030 	.word	0x40020030
 8000d30:	40020044 	.word	0x40020044
 8000d34:	40020058 	.word	0x40020058
 8000d38:	4002006c 	.word	0x4002006c
 8000d3c:	40020408 	.word	0x40020408
 8000d40:	4002041c 	.word	0x4002041c
 8000d44:	40020430 	.word	0x40020430
 8000d48:	40020444 	.word	0x40020444
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40020000 	.word	0x40020000

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b08b      	sub	sp, #44	; 0x2c
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d66:	e133      	b.n	8000fd0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	69fa      	ldr	r2, [r7, #28]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f040 8122 	bne.w	8000fca <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d034      	beq.n	8000df8 <HAL_GPIO_Init+0xa4>
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d80d      	bhi.n	8000dae <HAL_GPIO_Init+0x5a>
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d02b      	beq.n	8000dee <HAL_GPIO_Init+0x9a>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d804      	bhi.n	8000da4 <HAL_GPIO_Init+0x50>
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d031      	beq.n	8000e02 <HAL_GPIO_Init+0xae>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d01c      	beq.n	8000ddc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000da2:	e048      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d043      	beq.n	8000e30 <HAL_GPIO_Init+0xdc>
 8000da8:	2b11      	cmp	r3, #17
 8000daa:	d01b      	beq.n	8000de4 <HAL_GPIO_Init+0x90>
          break;
 8000dac:	e043      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dae:	4a8f      	ldr	r2, [pc, #572]	; (8000fec <HAL_GPIO_Init+0x298>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d026      	beq.n	8000e02 <HAL_GPIO_Init+0xae>
 8000db4:	4a8d      	ldr	r2, [pc, #564]	; (8000fec <HAL_GPIO_Init+0x298>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d806      	bhi.n	8000dc8 <HAL_GPIO_Init+0x74>
 8000dba:	4a8d      	ldr	r2, [pc, #564]	; (8000ff0 <HAL_GPIO_Init+0x29c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d020      	beq.n	8000e02 <HAL_GPIO_Init+0xae>
 8000dc0:	4a8c      	ldr	r2, [pc, #560]	; (8000ff4 <HAL_GPIO_Init+0x2a0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01d      	beq.n	8000e02 <HAL_GPIO_Init+0xae>
          break;
 8000dc6:	e036      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dc8:	4a8b      	ldr	r2, [pc, #556]	; (8000ff8 <HAL_GPIO_Init+0x2a4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0xae>
 8000dce:	4a8b      	ldr	r2, [pc, #556]	; (8000ffc <HAL_GPIO_Init+0x2a8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d016      	beq.n	8000e02 <HAL_GPIO_Init+0xae>
 8000dd4:	4a8a      	ldr	r2, [pc, #552]	; (8001000 <HAL_GPIO_Init+0x2ac>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0xae>
          break;
 8000dda:	e02c      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e028      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	3304      	adds	r3, #4
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e023      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	3308      	adds	r3, #8
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e01e      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	330c      	adds	r3, #12
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e019      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e012      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d105      	bne.n	8000e24 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	611a      	str	r2, [r3, #16]
          break;
 8000e22:	e008      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	615a      	str	r2, [r3, #20]
          break;
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2bff      	cmp	r3, #255	; 0xff
 8000e3a:	d801      	bhi.n	8000e40 <HAL_GPIO_Init+0xec>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	e001      	b.n	8000e44 <HAL_GPIO_Init+0xf0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3304      	adds	r3, #4
 8000e44:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d802      	bhi.n	8000e52 <HAL_GPIO_Init+0xfe>
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x104>
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	3b08      	subs	r3, #8
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	210f      	movs	r1, #15
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	401a      	ands	r2, r3
 8000e6a:	6a39      	ldr	r1, [r7, #32]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	431a      	orrs	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80a2 	beq.w	8000fca <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e86:	4b5f      	ldr	r3, [pc, #380]	; (8001004 <HAL_GPIO_Init+0x2b0>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a5e      	ldr	r2, [pc, #376]	; (8001004 <HAL_GPIO_Init+0x2b0>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b5c      	ldr	r3, [pc, #368]	; (8001004 <HAL_GPIO_Init+0x2b0>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e9e:	4a5a      	ldr	r2, [pc, #360]	; (8001008 <HAL_GPIO_Init+0x2b4>)
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a51      	ldr	r2, [pc, #324]	; (800100c <HAL_GPIO_Init+0x2b8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d01f      	beq.n	8000f0a <HAL_GPIO_Init+0x1b6>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a50      	ldr	r2, [pc, #320]	; (8001010 <HAL_GPIO_Init+0x2bc>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0x1b2>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4f      	ldr	r2, [pc, #316]	; (8001014 <HAL_GPIO_Init+0x2c0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x1ae>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4e      	ldr	r2, [pc, #312]	; (8001018 <HAL_GPIO_Init+0x2c4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x1aa>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4d      	ldr	r2, [pc, #308]	; (800101c <HAL_GPIO_Init+0x2c8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x1a6>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4c      	ldr	r2, [pc, #304]	; (8001020 <HAL_GPIO_Init+0x2cc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x1a2>
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	e00a      	b.n	8000f0c <HAL_GPIO_Init+0x1b8>
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	e008      	b.n	8000f0c <HAL_GPIO_Init+0x1b8>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x1b8>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e004      	b.n	8000f0c <HAL_GPIO_Init+0x1b8>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_Init+0x1b8>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x1b8>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0e:	f002 0203 	and.w	r2, r2, #3
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	4093      	lsls	r3, r2
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f1c:	493a      	ldr	r1, [pc, #232]	; (8001008 <HAL_GPIO_Init+0x2b4>)
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3302      	adds	r3, #2
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f36:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	493a      	ldr	r1, [pc, #232]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
 8000f42:	e006      	b.n	8000f52 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f44:	4b37      	ldr	r3, [pc, #220]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4935      	ldr	r1, [pc, #212]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	4930      	ldr	r1, [pc, #192]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
 8000f6a:	e006      	b.n	8000f7a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	492b      	ldr	r1, [pc, #172]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	4926      	ldr	r1, [pc, #152]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	608b      	str	r3, [r1, #8]
 8000f92:	e006      	b.n	8000fa2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f94:	4b23      	ldr	r3, [pc, #140]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4921      	ldr	r1, [pc, #132]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	491c      	ldr	r1, [pc, #112]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60cb      	str	r3, [r1, #12]
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4917      	ldr	r1, [pc, #92]	; (8001024 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	3301      	adds	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f47f aec4 	bne.w	8000d68 <HAL_GPIO_Init+0x14>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	372c      	adds	r7, #44	; 0x2c
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	10210000 	.word	0x10210000
 8000ff0:	10110000 	.word	0x10110000
 8000ff4:	10120000 	.word	0x10120000
 8000ff8:	10310000 	.word	0x10310000
 8000ffc:	10320000 	.word	0x10320000
 8001000:	10220000 	.word	0x10220000
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000
 800100c:	40010800 	.word	0x40010800
 8001010:	40010c00 	.word	0x40010c00
 8001014:	40011000 	.word	0x40011000
 8001018:	40011400 	.word	0x40011400
 800101c:	40011800 	.word	0x40011800
 8001020:	40011c00 	.word	0x40011c00
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e26c      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8087 	beq.w	8001156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001048:	4b92      	ldr	r3, [pc, #584]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b04      	cmp	r3, #4
 8001052:	d00c      	beq.n	800106e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001054:	4b8f      	ldr	r3, [pc, #572]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d112      	bne.n	8001086 <HAL_RCC_OscConfig+0x5e>
 8001060:	4b8c      	ldr	r3, [pc, #560]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d10b      	bne.n	8001086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	4b89      	ldr	r3, [pc, #548]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d06c      	beq.n	8001154 <HAL_RCC_OscConfig+0x12c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d168      	bne.n	8001154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e246      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108e:	d106      	bne.n	800109e <HAL_RCC_OscConfig+0x76>
 8001090:	4b80      	ldr	r3, [pc, #512]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a7f      	ldr	r2, [pc, #508]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e02e      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x98>
 80010a6:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a7a      	ldr	r2, [pc, #488]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b78      	ldr	r3, [pc, #480]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a77      	ldr	r2, [pc, #476]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e01d      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0xbc>
 80010ca:	4b72      	ldr	r3, [pc, #456]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a71      	ldr	r2, [pc, #452]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a6e      	ldr	r2, [pc, #440]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e00b      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 80010e4:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a6a      	ldr	r2, [pc, #424]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b68      	ldr	r3, [pc, #416]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a67      	ldr	r2, [pc, #412]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d013      	beq.n	800112c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fc06 	bl	8000914 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fc02 	bl	8000914 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	; 0x64
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e1fa      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0xe4>
 800112a:	e014      	b.n	8001156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fbf2 	bl	8000914 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fbee 	bl	8000914 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1e6      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x10c>
 8001152:	e000      	b.n	8001156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d063      	beq.n	800122a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001162:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800116e:	4b49      	ldr	r3, [pc, #292]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b08      	cmp	r3, #8
 8001178:	d11c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x18c>
 800117a:	4b46      	ldr	r3, [pc, #280]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d116      	bne.n	80011b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <HAL_RCC_OscConfig+0x176>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d001      	beq.n	800119e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e1ba      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4939      	ldr	r1, [pc, #228]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	e03a      	b.n	800122a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d020      	beq.n	80011fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fba7 	bl	8000914 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ca:	f7ff fba3 	bl	8000914 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e19b      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4927      	ldr	r1, [pc, #156]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
 80011fc:	e015      	b.n	800122a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fb86 	bl	8000914 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120c:	f7ff fb82 	bl	8000914 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e17a      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d03a      	beq.n	80012ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d019      	beq.n	8001272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_RCC_OscConfig+0x274>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001244:	f7ff fb66 	bl	8000914 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fb62 	bl	8000914 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e15a      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_RCC_OscConfig+0x26c>)
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800126a:	2001      	movs	r0, #1
 800126c:	f000 fada 	bl	8001824 <RCC_Delay>
 8001270:	e01c      	b.n	80012ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_RCC_OscConfig+0x274>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001278:	f7ff fb4c 	bl	8000914 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127e:	e00f      	b.n	80012a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fb48 	bl	8000914 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d908      	bls.n	80012a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e140      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	42420000 	.word	0x42420000
 800129c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a0:	4b9e      	ldr	r3, [pc, #632]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e9      	bne.n	8001280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80a6 	beq.w	8001406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012be:	4b97      	ldr	r3, [pc, #604]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10d      	bne.n	80012e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b94      	ldr	r3, [pc, #592]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a93      	ldr	r2, [pc, #588]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b91      	ldr	r3, [pc, #580]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b8e      	ldr	r3, [pc, #568]	; (8001520 <HAL_RCC_OscConfig+0x4f8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d118      	bne.n	8001324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b8b      	ldr	r3, [pc, #556]	; (8001520 <HAL_RCC_OscConfig+0x4f8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a8a      	ldr	r2, [pc, #552]	; (8001520 <HAL_RCC_OscConfig+0x4f8>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fb09 	bl	8000914 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff fb05 	bl	8000914 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0fd      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	4b81      	ldr	r3, [pc, #516]	; (8001520 <HAL_RCC_OscConfig+0x4f8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x312>
 800132c:	4b7b      	ldr	r3, [pc, #492]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4a7a      	ldr	r2, [pc, #488]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6213      	str	r3, [r2, #32]
 8001338:	e02d      	b.n	8001396 <HAL_RCC_OscConfig+0x36e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x334>
 8001342:	4b76      	ldr	r3, [pc, #472]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a75      	ldr	r2, [pc, #468]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6213      	str	r3, [r2, #32]
 800134e:	4b73      	ldr	r3, [pc, #460]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a72      	ldr	r2, [pc, #456]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	6213      	str	r3, [r2, #32]
 800135a:	e01c      	b.n	8001396 <HAL_RCC_OscConfig+0x36e>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d10c      	bne.n	800137e <HAL_RCC_OscConfig+0x356>
 8001364:	4b6d      	ldr	r3, [pc, #436]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a6c      	ldr	r2, [pc, #432]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6213      	str	r3, [r2, #32]
 8001370:	4b6a      	ldr	r3, [pc, #424]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a69      	ldr	r2, [pc, #420]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6213      	str	r3, [r2, #32]
 800137c:	e00b      	b.n	8001396 <HAL_RCC_OscConfig+0x36e>
 800137e:	4b67      	ldr	r3, [pc, #412]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a66      	ldr	r2, [pc, #408]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	4b64      	ldr	r3, [pc, #400]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a63      	ldr	r2, [pc, #396]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d015      	beq.n	80013ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fab9 	bl	8000914 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	e00a      	b.n	80013bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f7ff fab5 	bl	8000914 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0ab      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	4b57      	ldr	r3, [pc, #348]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0ee      	beq.n	80013a6 <HAL_RCC_OscConfig+0x37e>
 80013c8:	e014      	b.n	80013f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff faa3 	bl	8000914 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d2:	f7ff fa9f 	bl	8000914 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e095      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e8:	4b4c      	ldr	r3, [pc, #304]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ee      	bne.n	80013d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d105      	bne.n	8001406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fa:	4b48      	ldr	r3, [pc, #288]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a47      	ldr	r2, [pc, #284]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8081 	beq.w	8001512 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001410:	4b42      	ldr	r3, [pc, #264]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d061      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d146      	bne.n	80014b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001424:	4b3f      	ldr	r3, [pc, #252]	; (8001524 <HAL_RCC_OscConfig+0x4fc>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fa73 	bl	8000914 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff fa6f 	bl	8000914 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e067      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001444:	4b35      	ldr	r3, [pc, #212]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d108      	bne.n	800146c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	492d      	ldr	r1, [pc, #180]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a19      	ldr	r1, [r3, #32]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	430b      	orrs	r3, r1
 800147e:	4927      	ldr	r1, [pc, #156]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_RCC_OscConfig+0x4fc>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fa43 	bl	8000914 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fa3f 	bl	8000914 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e037      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x46a>
 80014b0:	e02f      	b.n	8001512 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_RCC_OscConfig+0x4fc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa2c 	bl	8000914 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fa28 	bl	8000914 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e020      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x498>
 80014de:	e018      	b.n	8001512 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e013      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	40007000 	.word	0x40007000
 8001524:	42420060 	.word	0x42420060

08001528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0d0      	b.n	80016de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b6a      	ldr	r3, [pc, #424]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d910      	bls.n	800156c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b67      	ldr	r3, [pc, #412]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 0207 	bic.w	r2, r3, #7
 8001552:	4965      	ldr	r1, [pc, #404]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0b8      	b.n	80016de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800158e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800159c:	4b53      	ldr	r3, [pc, #332]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a52      	ldr	r2, [pc, #328]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	494d      	ldr	r1, [pc, #308]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d040      	beq.n	8001648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b47      	ldr	r3, [pc, #284]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d115      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e07f      	b.n	80016de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e073      	b.n	80016de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e06b      	b.n	80016de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001606:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f023 0203 	bic.w	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4936      	ldr	r1, [pc, #216]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001618:	f7ff f97c 	bl	8000914 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff f978 	bl	8000914 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e053      	b.n	80016de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 020c 	and.w	r2, r3, #12
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1eb      	bne.n	8001620 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d210      	bcs.n	8001678 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 0207 	bic.w	r2, r3, #7
 800165e:	4922      	ldr	r1, [pc, #136]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e032      	b.n	80016de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4916      	ldr	r1, [pc, #88]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	490e      	ldr	r1, [pc, #56]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016b6:	f000 f821 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80016ba:	4601      	mov	r1, r0
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_RCC_ClockConfig+0x1c8>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	fa21 f303 	lsr.w	r3, r1, r3
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1cc>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1d0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f8da 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40022000 	.word	0x40022000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08002aa0 	.word	0x08002aa0
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016fc:	b490      	push	{r4, r7}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001704:	1d3c      	adds	r4, r7, #4
 8001706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d002      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x40>
 8001736:	2b08      	cmp	r3, #8
 8001738:	d003      	beq.n	8001742 <HAL_RCC_GetSysClockFreq+0x46>
 800173a:	e02d      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800173e:	623b      	str	r3, [r7, #32]
      break;
 8001740:	e02d      	b.n	800179e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	0c9b      	lsrs	r3, r3, #18
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800174e:	4413      	add	r3, r2
 8001750:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001754:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	0c5b      	lsrs	r3, r3, #17
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800176e:	4413      	add	r3, r2
 8001770:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001774:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800177a:	fb02 f203 	mul.w	r2, r2, r3
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
 8001786:	e004      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	623b      	str	r3, [r7, #32]
      break;
 8001796:	e002      	b.n	800179e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800179a:	623b      	str	r3, [r7, #32]
      break;
 800179c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179e:	6a3b      	ldr	r3, [r7, #32]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc90      	pop	{r4, r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	08002a8c 	.word	0x08002a8c
 80017b0:	08002a9c 	.word	0x08002a9c
 80017b4:	40021000 	.word	0x40021000
 80017b8:	007a1200 	.word	0x007a1200
 80017bc:	003d0900 	.word	0x003d0900

080017c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c4:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	20000000 	.word	0x20000000

080017d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017d8:	f7ff fff2 	bl	80017c0 <HAL_RCC_GetHCLKFreq>
 80017dc:	4601      	mov	r1, r0
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	4a03      	ldr	r2, [pc, #12]	; (80017f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000
 80017f8:	08002ab0 	.word	0x08002ab0

080017fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001800:	f7ff ffde 	bl	80017c0 <HAL_RCC_GetHCLKFreq>
 8001804:	4601      	mov	r1, r0
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	0adb      	lsrs	r3, r3, #11
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001818:	4618      	mov	r0, r3
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	08002ab0 	.word	0x08002ab0

08001824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <RCC_Delay+0x34>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <RCC_Delay+0x38>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	0a5b      	lsrs	r3, r3, #9
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001840:	bf00      	nop
  }
  while (Delay --);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1e5a      	subs	r2, r3, #1
 8001846:	60fa      	str	r2, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f9      	bne.n	8001840 <RCC_Delay+0x1c>
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000000 	.word	0x20000000
 800185c:	10624dd3 	.word	0x10624dd3

08001860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e03f      	b.n	80018f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe fe60 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fba9 	bl	8001ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b088      	sub	sp, #32
 80018fe:	af02      	add	r7, sp, #8
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b20      	cmp	r3, #32
 8001918:	f040 8083 	bne.w	8001a22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_UART_Transmit+0x2e>
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e07b      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_UART_Transmit+0x40>
 8001936:	2302      	movs	r3, #2
 8001938:	e074      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2221      	movs	r2, #33	; 0x21
 800194c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001950:	f7fe ffe0 	bl	8000914 <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	88fa      	ldrh	r2, [r7, #6]
 8001960:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001962:	e042      	b.n	80019ea <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197a:	d122      	bne.n	80019c2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2200      	movs	r2, #0
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f9cf 	bl	8001d2a <UART_WaitOnFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e046      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	3302      	adds	r3, #2
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	e017      	b.n	80019ea <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	e013      	b.n	80019ea <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f9ac 	bl	8001d2a <UART_WaitOnFlagUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e023      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	60ba      	str	r2, [r7, #8]
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1b7      	bne.n	8001964 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2200      	movs	r2, #0
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f993 	bl	8001d2a <UART_WaitOnFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e00a      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2220      	movs	r2, #32
 8001a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001a22:	2302      	movs	r3, #2
  }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	4613      	mov	r3, r2
 8001a38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b20      	cmp	r3, #32
 8001a44:	d140      	bne.n	8001ac8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_UART_Receive_IT+0x26>
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e039      	b.n	8001aca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_UART_Receive_IT+0x38>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e032      	b.n	8001aca <HAL_UART_Receive_IT+0x9e>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2222      	movs	r2, #34	; 0x22
 8001a88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0220 	orr.w	r2, r2, #32
 8001ac2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e000      	b.n	8001aca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001ac8:	2302      	movs	r3, #2
  }
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10d      	bne.n	8001b26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_UART_IRQHandler+0x52>
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f9eb 	bl	8001efa <UART_Receive_IT>
      return;
 8001b24:	e0cc      	b.n	8001cc0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80ab 	beq.w	8001c84 <HAL_UART_IRQHandler+0x1b0>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_UART_IRQHandler+0x70>
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80a0 	beq.w	8001c84 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <HAL_UART_IRQHandler+0x90>
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <HAL_UART_IRQHandler+0xb0>
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	f043 0202 	orr.w	r2, r3, #2
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00a      	beq.n	8001ba4 <HAL_UART_IRQHandler+0xd0>
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9c:	f043 0204 	orr.w	r2, r3, #4
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_UART_IRQHandler+0xf0>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	f043 0208 	orr.w	r2, r3, #8
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d078      	beq.n	8001cbe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_UART_IRQHandler+0x112>
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f98a 	bl	8001efa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <HAL_UART_IRQHandler+0x13a>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d031      	beq.n	8001c72 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8d5 	bl	8001dbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d023      	beq.n	8001c6a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d013      	beq.n	8001c62 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_UART_IRQHandler+0x1f4>)
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe ff7c 	bl	8000b44 <HAL_DMA_Abort_IT>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c60:	e00e      	b.n	8001c80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f83b 	bl	8001cde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c68:	e00a      	b.n	8001c80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f837 	bl	8001cde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c70:	e006      	b.n	8001c80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f833 	bl	8001cde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001c7e:	e01e      	b.n	8001cbe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c80:	bf00      	nop
    return;
 8001c82:	e01c      	b.n	8001cbe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_UART_IRQHandler+0x1cc>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f8c1 	bl	8001e20 <UART_Transmit_IT>
    return;
 8001c9e:	e00f      	b.n	8001cc0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00a      	beq.n	8001cc0 <HAL_UART_IRQHandler+0x1ec>
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f908 	bl	8001eca <UART_EndTransmit_IT>
    return;
 8001cba:	bf00      	nop
 8001cbc:	e000      	b.n	8001cc0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001cbe:	bf00      	nop
  }
}
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08001df9 	.word	0x08001df9

08001ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b2db      	uxtb	r3, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4613      	mov	r3, r2
 8001d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d3a:	e02c      	b.n	8001d96 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d42:	d028      	beq.n	8001d96 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <UART_WaitOnFlagUntilTimeout+0x30>
 8001d4a:	f7fe fde3 	bl	8000914 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d21d      	bcs.n	8001d96 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d68:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e00f      	b.n	8001db6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d0c3      	beq.n	8001d3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001dd4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff ff63 	bl	8001cde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b21      	cmp	r3, #33	; 0x21
 8001e32:	d144      	bne.n	8001ebe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3c:	d11a      	bne.n	8001e74 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e52:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	1c9a      	adds	r2, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	621a      	str	r2, [r3, #32]
 8001e66:	e00e      	b.n	8001e86 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	621a      	str	r2, [r3, #32]
 8001e72:	e008      	b.n	8001e86 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	1c59      	adds	r1, r3, #1
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6211      	str	r1, [r2, #32]
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4619      	mov	r1, r3
 8001e94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10f      	bne.n	8001eba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
  }
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff feee 	bl	8001ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b22      	cmp	r3, #34	; 0x22
 8001f0c:	d171      	bne.n	8001ff2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f16:	d123      	bne.n	8001f60 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10e      	bne.n	8001f44 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	1c9a      	adds	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
 8001f42:	e029      	b.n	8001f98 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f5e:	e01b      	b.n	8001f98 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6858      	ldr	r0, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	1c59      	adds	r1, r3, #1
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6291      	str	r1, [r2, #40]	; 0x28
 8001f78:	b2c2      	uxtb	r2, r0
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e00c      	b.n	8001f98 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	1c58      	adds	r0, r3, #1
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	6288      	str	r0, [r1, #40]	; 0x28
 8001f90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d120      	bne.n	8001fee <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0220 	bic.w	r2, r2, #32
 8001fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7fe fbb3 	bl	8000750 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e002      	b.n	8001ff4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
  }
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002036:	f023 030c 	bic.w	r3, r3, #12
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	68f9      	ldr	r1, [r7, #12]
 8002040:	430b      	orrs	r3, r1
 8002042:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <UART_SetConfig+0x1ac>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d14e      	bne.n	8002102 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002064:	f7ff fbca 	bl	80017fc <HAL_RCC_GetPCLK2Freq>
 8002068:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	009a      	lsls	r2, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	4a4a      	ldr	r2, [pc, #296]	; (80021ac <UART_SetConfig+0x1b0>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	0119      	lsls	r1, r3, #4
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009a      	lsls	r2, r3, #2
 8002094:	441a      	add	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fbb2 f2f3 	udiv	r2, r2, r3
 80020a0:	4b42      	ldr	r3, [pc, #264]	; (80021ac <UART_SetConfig+0x1b0>)
 80020a2:	fba3 0302 	umull	r0, r3, r3, r2
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2064      	movs	r0, #100	; 0x64
 80020aa:	fb00 f303 	mul.w	r3, r0, r3
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	3332      	adds	r3, #50	; 0x32
 80020b4:	4a3d      	ldr	r2, [pc, #244]	; (80021ac <UART_SetConfig+0x1b0>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c0:	4419      	add	r1, r3
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	009a      	lsls	r2, r3, #2
 80020cc:	441a      	add	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <UART_SetConfig+0x1b0>)
 80020da:	fba3 0302 	umull	r0, r3, r3, r2
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2064      	movs	r0, #100	; 0x64
 80020e2:	fb00 f303 	mul.w	r3, r0, r3
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	3332      	adds	r3, #50	; 0x32
 80020ec:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <UART_SetConfig+0x1b0>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	f003 020f 	and.w	r2, r3, #15
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	440a      	add	r2, r1
 80020fe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002100:	e04d      	b.n	800219e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002102:	f7ff fb67 	bl	80017d4 <HAL_RCC_GetPCLK1Freq>
 8002106:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	009a      	lsls	r2, r3, #2
 8002112:	441a      	add	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <UART_SetConfig+0x1b0>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	0119      	lsls	r1, r3, #4
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	009a      	lsls	r2, r3, #2
 8002132:	441a      	add	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	fbb2 f2f3 	udiv	r2, r2, r3
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <UART_SetConfig+0x1b0>)
 8002140:	fba3 0302 	umull	r0, r3, r3, r2
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	2064      	movs	r0, #100	; 0x64
 8002148:	fb00 f303 	mul.w	r3, r0, r3
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	3332      	adds	r3, #50	; 0x32
 8002152:	4a16      	ldr	r2, [pc, #88]	; (80021ac <UART_SetConfig+0x1b0>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800215e:	4419      	add	r1, r3
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	009a      	lsls	r2, r3, #2
 800216a:	441a      	add	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	fbb2 f2f3 	udiv	r2, r2, r3
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <UART_SetConfig+0x1b0>)
 8002178:	fba3 0302 	umull	r0, r3, r3, r2
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	2064      	movs	r0, #100	; 0x64
 8002180:	fb00 f303 	mul.w	r3, r0, r3
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	3332      	adds	r3, #50	; 0x32
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <UART_SetConfig+0x1b0>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	440a      	add	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40013800 	.word	0x40013800
 80021ac:	51eb851f 	.word	0x51eb851f

080021b0 <calloc>:
 80021b0:	4b02      	ldr	r3, [pc, #8]	; (80021bc <calloc+0xc>)
 80021b2:	460a      	mov	r2, r1
 80021b4:	4601      	mov	r1, r0
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	f000 b834 	b.w	8002224 <_calloc_r>
 80021bc:	2000000c 	.word	0x2000000c

080021c0 <__errno>:
 80021c0:	4b01      	ldr	r3, [pc, #4]	; (80021c8 <__errno+0x8>)
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000000c 	.word	0x2000000c

080021cc <__libc_init_array>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	2500      	movs	r5, #0
 80021d0:	4e0c      	ldr	r6, [pc, #48]	; (8002204 <__libc_init_array+0x38>)
 80021d2:	4c0d      	ldr	r4, [pc, #52]	; (8002208 <__libc_init_array+0x3c>)
 80021d4:	1ba4      	subs	r4, r4, r6
 80021d6:	10a4      	asrs	r4, r4, #2
 80021d8:	42a5      	cmp	r5, r4
 80021da:	d109      	bne.n	80021f0 <__libc_init_array+0x24>
 80021dc:	f000 fc4a 	bl	8002a74 <_init>
 80021e0:	2500      	movs	r5, #0
 80021e2:	4e0a      	ldr	r6, [pc, #40]	; (800220c <__libc_init_array+0x40>)
 80021e4:	4c0a      	ldr	r4, [pc, #40]	; (8002210 <__libc_init_array+0x44>)
 80021e6:	1ba4      	subs	r4, r4, r6
 80021e8:	10a4      	asrs	r4, r4, #2
 80021ea:	42a5      	cmp	r5, r4
 80021ec:	d105      	bne.n	80021fa <__libc_init_array+0x2e>
 80021ee:	bd70      	pop	{r4, r5, r6, pc}
 80021f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021f4:	4798      	blx	r3
 80021f6:	3501      	adds	r5, #1
 80021f8:	e7ee      	b.n	80021d8 <__libc_init_array+0xc>
 80021fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021fe:	4798      	blx	r3
 8002200:	3501      	adds	r5, #1
 8002202:	e7f2      	b.n	80021ea <__libc_init_array+0x1e>
 8002204:	08002aec 	.word	0x08002aec
 8002208:	08002aec 	.word	0x08002aec
 800220c:	08002aec 	.word	0x08002aec
 8002210:	08002af0 	.word	0x08002af0

08002214 <memset>:
 8002214:	4603      	mov	r3, r0
 8002216:	4402      	add	r2, r0
 8002218:	4293      	cmp	r3, r2
 800221a:	d100      	bne.n	800221e <memset+0xa>
 800221c:	4770      	bx	lr
 800221e:	f803 1b01 	strb.w	r1, [r3], #1
 8002222:	e7f9      	b.n	8002218 <memset+0x4>

08002224 <_calloc_r>:
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	fb02 f401 	mul.w	r4, r2, r1
 800222a:	4621      	mov	r1, r4
 800222c:	f000 f808 	bl	8002240 <_malloc_r>
 8002230:	4605      	mov	r5, r0
 8002232:	b118      	cbz	r0, 800223c <_calloc_r+0x18>
 8002234:	4622      	mov	r2, r4
 8002236:	2100      	movs	r1, #0
 8002238:	f7ff ffec 	bl	8002214 <memset>
 800223c:	4628      	mov	r0, r5
 800223e:	bd38      	pop	{r3, r4, r5, pc}

08002240 <_malloc_r>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	1ccd      	adds	r5, r1, #3
 8002244:	f025 0503 	bic.w	r5, r5, #3
 8002248:	3508      	adds	r5, #8
 800224a:	2d0c      	cmp	r5, #12
 800224c:	bf38      	it	cc
 800224e:	250c      	movcc	r5, #12
 8002250:	2d00      	cmp	r5, #0
 8002252:	4606      	mov	r6, r0
 8002254:	db01      	blt.n	800225a <_malloc_r+0x1a>
 8002256:	42a9      	cmp	r1, r5
 8002258:	d903      	bls.n	8002262 <_malloc_r+0x22>
 800225a:	230c      	movs	r3, #12
 800225c:	6033      	str	r3, [r6, #0]
 800225e:	2000      	movs	r0, #0
 8002260:	bd70      	pop	{r4, r5, r6, pc}
 8002262:	f000 f87f 	bl	8002364 <__malloc_lock>
 8002266:	4a21      	ldr	r2, [pc, #132]	; (80022ec <_malloc_r+0xac>)
 8002268:	6814      	ldr	r4, [r2, #0]
 800226a:	4621      	mov	r1, r4
 800226c:	b991      	cbnz	r1, 8002294 <_malloc_r+0x54>
 800226e:	4c20      	ldr	r4, [pc, #128]	; (80022f0 <_malloc_r+0xb0>)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	b91b      	cbnz	r3, 800227c <_malloc_r+0x3c>
 8002274:	4630      	mov	r0, r6
 8002276:	f000 f83d 	bl	80022f4 <_sbrk_r>
 800227a:	6020      	str	r0, [r4, #0]
 800227c:	4629      	mov	r1, r5
 800227e:	4630      	mov	r0, r6
 8002280:	f000 f838 	bl	80022f4 <_sbrk_r>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	d124      	bne.n	80022d2 <_malloc_r+0x92>
 8002288:	230c      	movs	r3, #12
 800228a:	4630      	mov	r0, r6
 800228c:	6033      	str	r3, [r6, #0]
 800228e:	f000 f86a 	bl	8002366 <__malloc_unlock>
 8002292:	e7e4      	b.n	800225e <_malloc_r+0x1e>
 8002294:	680b      	ldr	r3, [r1, #0]
 8002296:	1b5b      	subs	r3, r3, r5
 8002298:	d418      	bmi.n	80022cc <_malloc_r+0x8c>
 800229a:	2b0b      	cmp	r3, #11
 800229c:	d90f      	bls.n	80022be <_malloc_r+0x7e>
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	18cc      	adds	r4, r1, r3
 80022a2:	50cd      	str	r5, [r1, r3]
 80022a4:	4630      	mov	r0, r6
 80022a6:	f000 f85e 	bl	8002366 <__malloc_unlock>
 80022aa:	f104 000b 	add.w	r0, r4, #11
 80022ae:	1d23      	adds	r3, r4, #4
 80022b0:	f020 0007 	bic.w	r0, r0, #7
 80022b4:	1ac3      	subs	r3, r0, r3
 80022b6:	d0d3      	beq.n	8002260 <_malloc_r+0x20>
 80022b8:	425a      	negs	r2, r3
 80022ba:	50e2      	str	r2, [r4, r3]
 80022bc:	e7d0      	b.n	8002260 <_malloc_r+0x20>
 80022be:	684b      	ldr	r3, [r1, #4]
 80022c0:	428c      	cmp	r4, r1
 80022c2:	bf16      	itet	ne
 80022c4:	6063      	strne	r3, [r4, #4]
 80022c6:	6013      	streq	r3, [r2, #0]
 80022c8:	460c      	movne	r4, r1
 80022ca:	e7eb      	b.n	80022a4 <_malloc_r+0x64>
 80022cc:	460c      	mov	r4, r1
 80022ce:	6849      	ldr	r1, [r1, #4]
 80022d0:	e7cc      	b.n	800226c <_malloc_r+0x2c>
 80022d2:	1cc4      	adds	r4, r0, #3
 80022d4:	f024 0403 	bic.w	r4, r4, #3
 80022d8:	42a0      	cmp	r0, r4
 80022da:	d005      	beq.n	80022e8 <_malloc_r+0xa8>
 80022dc:	1a21      	subs	r1, r4, r0
 80022de:	4630      	mov	r0, r6
 80022e0:	f000 f808 	bl	80022f4 <_sbrk_r>
 80022e4:	3001      	adds	r0, #1
 80022e6:	d0cf      	beq.n	8002288 <_malloc_r+0x48>
 80022e8:	6025      	str	r5, [r4, #0]
 80022ea:	e7db      	b.n	80022a4 <_malloc_r+0x64>
 80022ec:	20000090 	.word	0x20000090
 80022f0:	20000094 	.word	0x20000094

080022f4 <_sbrk_r>:
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	2300      	movs	r3, #0
 80022f8:	4c05      	ldr	r4, [pc, #20]	; (8002310 <_sbrk_r+0x1c>)
 80022fa:	4605      	mov	r5, r0
 80022fc:	4608      	mov	r0, r1
 80022fe:	6023      	str	r3, [r4, #0]
 8002300:	f7fe f89a 	bl	8000438 <_sbrk>
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	d102      	bne.n	800230e <_sbrk_r+0x1a>
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	b103      	cbz	r3, 800230e <_sbrk_r+0x1a>
 800230c:	602b      	str	r3, [r5, #0]
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	200000e4 	.word	0x200000e4

08002314 <strcpy>:
 8002314:	4603      	mov	r3, r0
 8002316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800231a:	f803 2b01 	strb.w	r2, [r3], #1
 800231e:	2a00      	cmp	r2, #0
 8002320:	d1f9      	bne.n	8002316 <strcpy+0x2>
 8002322:	4770      	bx	lr

08002324 <_vsiprintf_r>:
 8002324:	b500      	push	{lr}
 8002326:	b09b      	sub	sp, #108	; 0x6c
 8002328:	9100      	str	r1, [sp, #0]
 800232a:	9104      	str	r1, [sp, #16]
 800232c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002330:	9105      	str	r1, [sp, #20]
 8002332:	9102      	str	r1, [sp, #8]
 8002334:	4905      	ldr	r1, [pc, #20]	; (800234c <_vsiprintf_r+0x28>)
 8002336:	9103      	str	r1, [sp, #12]
 8002338:	4669      	mov	r1, sp
 800233a:	f000 f86f 	bl	800241c <_svfiprintf_r>
 800233e:	2200      	movs	r2, #0
 8002340:	9b00      	ldr	r3, [sp, #0]
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	b01b      	add	sp, #108	; 0x6c
 8002346:	f85d fb04 	ldr.w	pc, [sp], #4
 800234a:	bf00      	nop
 800234c:	ffff0208 	.word	0xffff0208

08002350 <vsiprintf>:
 8002350:	4613      	mov	r3, r2
 8002352:	460a      	mov	r2, r1
 8002354:	4601      	mov	r1, r0
 8002356:	4802      	ldr	r0, [pc, #8]	; (8002360 <vsiprintf+0x10>)
 8002358:	6800      	ldr	r0, [r0, #0]
 800235a:	f7ff bfe3 	b.w	8002324 <_vsiprintf_r>
 800235e:	bf00      	nop
 8002360:	2000000c 	.word	0x2000000c

08002364 <__malloc_lock>:
 8002364:	4770      	bx	lr

08002366 <__malloc_unlock>:
 8002366:	4770      	bx	lr

08002368 <__ssputs_r>:
 8002368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800236c:	688e      	ldr	r6, [r1, #8]
 800236e:	4682      	mov	sl, r0
 8002370:	429e      	cmp	r6, r3
 8002372:	460c      	mov	r4, r1
 8002374:	4690      	mov	r8, r2
 8002376:	4699      	mov	r9, r3
 8002378:	d837      	bhi.n	80023ea <__ssputs_r+0x82>
 800237a:	898a      	ldrh	r2, [r1, #12]
 800237c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002380:	d031      	beq.n	80023e6 <__ssputs_r+0x7e>
 8002382:	2302      	movs	r3, #2
 8002384:	6825      	ldr	r5, [r4, #0]
 8002386:	6909      	ldr	r1, [r1, #16]
 8002388:	1a6f      	subs	r7, r5, r1
 800238a:	6965      	ldr	r5, [r4, #20]
 800238c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002390:	fb95 f5f3 	sdiv	r5, r5, r3
 8002394:	f109 0301 	add.w	r3, r9, #1
 8002398:	443b      	add	r3, r7
 800239a:	429d      	cmp	r5, r3
 800239c:	bf38      	it	cc
 800239e:	461d      	movcc	r5, r3
 80023a0:	0553      	lsls	r3, r2, #21
 80023a2:	d530      	bpl.n	8002406 <__ssputs_r+0x9e>
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7ff ff4b 	bl	8002240 <_malloc_r>
 80023aa:	4606      	mov	r6, r0
 80023ac:	b950      	cbnz	r0, 80023c4 <__ssputs_r+0x5c>
 80023ae:	230c      	movs	r3, #12
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f8ca 3000 	str.w	r3, [sl]
 80023b8:	89a3      	ldrh	r3, [r4, #12]
 80023ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023be:	81a3      	strh	r3, [r4, #12]
 80023c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023c4:	463a      	mov	r2, r7
 80023c6:	6921      	ldr	r1, [r4, #16]
 80023c8:	f000 fab6 	bl	8002938 <memcpy>
 80023cc:	89a3      	ldrh	r3, [r4, #12]
 80023ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d6:	81a3      	strh	r3, [r4, #12]
 80023d8:	6126      	str	r6, [r4, #16]
 80023da:	443e      	add	r6, r7
 80023dc:	6026      	str	r6, [r4, #0]
 80023de:	464e      	mov	r6, r9
 80023e0:	6165      	str	r5, [r4, #20]
 80023e2:	1bed      	subs	r5, r5, r7
 80023e4:	60a5      	str	r5, [r4, #8]
 80023e6:	454e      	cmp	r6, r9
 80023e8:	d900      	bls.n	80023ec <__ssputs_r+0x84>
 80023ea:	464e      	mov	r6, r9
 80023ec:	4632      	mov	r2, r6
 80023ee:	4641      	mov	r1, r8
 80023f0:	6820      	ldr	r0, [r4, #0]
 80023f2:	f000 faac 	bl	800294e <memmove>
 80023f6:	68a3      	ldr	r3, [r4, #8]
 80023f8:	2000      	movs	r0, #0
 80023fa:	1b9b      	subs	r3, r3, r6
 80023fc:	60a3      	str	r3, [r4, #8]
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	441e      	add	r6, r3
 8002402:	6026      	str	r6, [r4, #0]
 8002404:	e7dc      	b.n	80023c0 <__ssputs_r+0x58>
 8002406:	462a      	mov	r2, r5
 8002408:	f000 fb06 	bl	8002a18 <_realloc_r>
 800240c:	4606      	mov	r6, r0
 800240e:	2800      	cmp	r0, #0
 8002410:	d1e2      	bne.n	80023d8 <__ssputs_r+0x70>
 8002412:	6921      	ldr	r1, [r4, #16]
 8002414:	4650      	mov	r0, sl
 8002416:	f000 fab3 	bl	8002980 <_free_r>
 800241a:	e7c8      	b.n	80023ae <__ssputs_r+0x46>

0800241c <_svfiprintf_r>:
 800241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002420:	461d      	mov	r5, r3
 8002422:	898b      	ldrh	r3, [r1, #12]
 8002424:	b09d      	sub	sp, #116	; 0x74
 8002426:	061f      	lsls	r7, r3, #24
 8002428:	4680      	mov	r8, r0
 800242a:	460c      	mov	r4, r1
 800242c:	4616      	mov	r6, r2
 800242e:	d50f      	bpl.n	8002450 <_svfiprintf_r+0x34>
 8002430:	690b      	ldr	r3, [r1, #16]
 8002432:	b96b      	cbnz	r3, 8002450 <_svfiprintf_r+0x34>
 8002434:	2140      	movs	r1, #64	; 0x40
 8002436:	f7ff ff03 	bl	8002240 <_malloc_r>
 800243a:	6020      	str	r0, [r4, #0]
 800243c:	6120      	str	r0, [r4, #16]
 800243e:	b928      	cbnz	r0, 800244c <_svfiprintf_r+0x30>
 8002440:	230c      	movs	r3, #12
 8002442:	f8c8 3000 	str.w	r3, [r8]
 8002446:	f04f 30ff 	mov.w	r0, #4294967295
 800244a:	e0c8      	b.n	80025de <_svfiprintf_r+0x1c2>
 800244c:	2340      	movs	r3, #64	; 0x40
 800244e:	6163      	str	r3, [r4, #20]
 8002450:	2300      	movs	r3, #0
 8002452:	9309      	str	r3, [sp, #36]	; 0x24
 8002454:	2320      	movs	r3, #32
 8002456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800245a:	2330      	movs	r3, #48	; 0x30
 800245c:	f04f 0b01 	mov.w	fp, #1
 8002460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002464:	9503      	str	r5, [sp, #12]
 8002466:	4637      	mov	r7, r6
 8002468:	463d      	mov	r5, r7
 800246a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800246e:	b10b      	cbz	r3, 8002474 <_svfiprintf_r+0x58>
 8002470:	2b25      	cmp	r3, #37	; 0x25
 8002472:	d13e      	bne.n	80024f2 <_svfiprintf_r+0xd6>
 8002474:	ebb7 0a06 	subs.w	sl, r7, r6
 8002478:	d00b      	beq.n	8002492 <_svfiprintf_r+0x76>
 800247a:	4653      	mov	r3, sl
 800247c:	4632      	mov	r2, r6
 800247e:	4621      	mov	r1, r4
 8002480:	4640      	mov	r0, r8
 8002482:	f7ff ff71 	bl	8002368 <__ssputs_r>
 8002486:	3001      	adds	r0, #1
 8002488:	f000 80a4 	beq.w	80025d4 <_svfiprintf_r+0x1b8>
 800248c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800248e:	4453      	add	r3, sl
 8002490:	9309      	str	r3, [sp, #36]	; 0x24
 8002492:	783b      	ldrb	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 809d 	beq.w	80025d4 <_svfiprintf_r+0x1b8>
 800249a:	2300      	movs	r3, #0
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024a4:	9304      	str	r3, [sp, #16]
 80024a6:	9307      	str	r3, [sp, #28]
 80024a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024ac:	931a      	str	r3, [sp, #104]	; 0x68
 80024ae:	462f      	mov	r7, r5
 80024b0:	2205      	movs	r2, #5
 80024b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80024b6:	4850      	ldr	r0, [pc, #320]	; (80025f8 <_svfiprintf_r+0x1dc>)
 80024b8:	f000 fa30 	bl	800291c <memchr>
 80024bc:	9b04      	ldr	r3, [sp, #16]
 80024be:	b9d0      	cbnz	r0, 80024f6 <_svfiprintf_r+0xda>
 80024c0:	06d9      	lsls	r1, r3, #27
 80024c2:	bf44      	itt	mi
 80024c4:	2220      	movmi	r2, #32
 80024c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024ca:	071a      	lsls	r2, r3, #28
 80024cc:	bf44      	itt	mi
 80024ce:	222b      	movmi	r2, #43	; 0x2b
 80024d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024d4:	782a      	ldrb	r2, [r5, #0]
 80024d6:	2a2a      	cmp	r2, #42	; 0x2a
 80024d8:	d015      	beq.n	8002506 <_svfiprintf_r+0xea>
 80024da:	462f      	mov	r7, r5
 80024dc:	2000      	movs	r0, #0
 80024de:	250a      	movs	r5, #10
 80024e0:	9a07      	ldr	r2, [sp, #28]
 80024e2:	4639      	mov	r1, r7
 80024e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024e8:	3b30      	subs	r3, #48	; 0x30
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d94d      	bls.n	800258a <_svfiprintf_r+0x16e>
 80024ee:	b1b8      	cbz	r0, 8002520 <_svfiprintf_r+0x104>
 80024f0:	e00f      	b.n	8002512 <_svfiprintf_r+0xf6>
 80024f2:	462f      	mov	r7, r5
 80024f4:	e7b8      	b.n	8002468 <_svfiprintf_r+0x4c>
 80024f6:	4a40      	ldr	r2, [pc, #256]	; (80025f8 <_svfiprintf_r+0x1dc>)
 80024f8:	463d      	mov	r5, r7
 80024fa:	1a80      	subs	r0, r0, r2
 80024fc:	fa0b f000 	lsl.w	r0, fp, r0
 8002500:	4318      	orrs	r0, r3
 8002502:	9004      	str	r0, [sp, #16]
 8002504:	e7d3      	b.n	80024ae <_svfiprintf_r+0x92>
 8002506:	9a03      	ldr	r2, [sp, #12]
 8002508:	1d11      	adds	r1, r2, #4
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	9103      	str	r1, [sp, #12]
 800250e:	2a00      	cmp	r2, #0
 8002510:	db01      	blt.n	8002516 <_svfiprintf_r+0xfa>
 8002512:	9207      	str	r2, [sp, #28]
 8002514:	e004      	b.n	8002520 <_svfiprintf_r+0x104>
 8002516:	4252      	negs	r2, r2
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	9207      	str	r2, [sp, #28]
 800251e:	9304      	str	r3, [sp, #16]
 8002520:	783b      	ldrb	r3, [r7, #0]
 8002522:	2b2e      	cmp	r3, #46	; 0x2e
 8002524:	d10c      	bne.n	8002540 <_svfiprintf_r+0x124>
 8002526:	787b      	ldrb	r3, [r7, #1]
 8002528:	2b2a      	cmp	r3, #42	; 0x2a
 800252a:	d133      	bne.n	8002594 <_svfiprintf_r+0x178>
 800252c:	9b03      	ldr	r3, [sp, #12]
 800252e:	3702      	adds	r7, #2
 8002530:	1d1a      	adds	r2, r3, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	9203      	str	r2, [sp, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	bfb8      	it	lt
 800253a:	f04f 33ff 	movlt.w	r3, #4294967295
 800253e:	9305      	str	r3, [sp, #20]
 8002540:	4d2e      	ldr	r5, [pc, #184]	; (80025fc <_svfiprintf_r+0x1e0>)
 8002542:	2203      	movs	r2, #3
 8002544:	7839      	ldrb	r1, [r7, #0]
 8002546:	4628      	mov	r0, r5
 8002548:	f000 f9e8 	bl	800291c <memchr>
 800254c:	b138      	cbz	r0, 800255e <_svfiprintf_r+0x142>
 800254e:	2340      	movs	r3, #64	; 0x40
 8002550:	1b40      	subs	r0, r0, r5
 8002552:	fa03 f000 	lsl.w	r0, r3, r0
 8002556:	9b04      	ldr	r3, [sp, #16]
 8002558:	3701      	adds	r7, #1
 800255a:	4303      	orrs	r3, r0
 800255c:	9304      	str	r3, [sp, #16]
 800255e:	7839      	ldrb	r1, [r7, #0]
 8002560:	2206      	movs	r2, #6
 8002562:	4827      	ldr	r0, [pc, #156]	; (8002600 <_svfiprintf_r+0x1e4>)
 8002564:	1c7e      	adds	r6, r7, #1
 8002566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800256a:	f000 f9d7 	bl	800291c <memchr>
 800256e:	2800      	cmp	r0, #0
 8002570:	d038      	beq.n	80025e4 <_svfiprintf_r+0x1c8>
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <_svfiprintf_r+0x1e8>)
 8002574:	bb13      	cbnz	r3, 80025bc <_svfiprintf_r+0x1a0>
 8002576:	9b03      	ldr	r3, [sp, #12]
 8002578:	3307      	adds	r3, #7
 800257a:	f023 0307 	bic.w	r3, r3, #7
 800257e:	3308      	adds	r3, #8
 8002580:	9303      	str	r3, [sp, #12]
 8002582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002584:	444b      	add	r3, r9
 8002586:	9309      	str	r3, [sp, #36]	; 0x24
 8002588:	e76d      	b.n	8002466 <_svfiprintf_r+0x4a>
 800258a:	fb05 3202 	mla	r2, r5, r2, r3
 800258e:	2001      	movs	r0, #1
 8002590:	460f      	mov	r7, r1
 8002592:	e7a6      	b.n	80024e2 <_svfiprintf_r+0xc6>
 8002594:	2300      	movs	r3, #0
 8002596:	250a      	movs	r5, #10
 8002598:	4619      	mov	r1, r3
 800259a:	3701      	adds	r7, #1
 800259c:	9305      	str	r3, [sp, #20]
 800259e:	4638      	mov	r0, r7
 80025a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025a4:	3a30      	subs	r2, #48	; 0x30
 80025a6:	2a09      	cmp	r2, #9
 80025a8:	d903      	bls.n	80025b2 <_svfiprintf_r+0x196>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0c8      	beq.n	8002540 <_svfiprintf_r+0x124>
 80025ae:	9105      	str	r1, [sp, #20]
 80025b0:	e7c6      	b.n	8002540 <_svfiprintf_r+0x124>
 80025b2:	fb05 2101 	mla	r1, r5, r1, r2
 80025b6:	2301      	movs	r3, #1
 80025b8:	4607      	mov	r7, r0
 80025ba:	e7f0      	b.n	800259e <_svfiprintf_r+0x182>
 80025bc:	ab03      	add	r3, sp, #12
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4622      	mov	r2, r4
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <_svfiprintf_r+0x1ec>)
 80025c4:	a904      	add	r1, sp, #16
 80025c6:	4640      	mov	r0, r8
 80025c8:	f3af 8000 	nop.w
 80025cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80025d0:	4681      	mov	r9, r0
 80025d2:	d1d6      	bne.n	8002582 <_svfiprintf_r+0x166>
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	065b      	lsls	r3, r3, #25
 80025d8:	f53f af35 	bmi.w	8002446 <_svfiprintf_r+0x2a>
 80025dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025de:	b01d      	add	sp, #116	; 0x74
 80025e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e4:	ab03      	add	r3, sp, #12
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4622      	mov	r2, r4
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <_svfiprintf_r+0x1ec>)
 80025ec:	a904      	add	r1, sp, #16
 80025ee:	4640      	mov	r0, r8
 80025f0:	f000 f882 	bl	80026f8 <_printf_i>
 80025f4:	e7ea      	b.n	80025cc <_svfiprintf_r+0x1b0>
 80025f6:	bf00      	nop
 80025f8:	08002ab8 	.word	0x08002ab8
 80025fc:	08002abe 	.word	0x08002abe
 8002600:	08002ac2 	.word	0x08002ac2
 8002604:	00000000 	.word	0x00000000
 8002608:	08002369 	.word	0x08002369

0800260c <_printf_common>:
 800260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002610:	4691      	mov	r9, r2
 8002612:	461f      	mov	r7, r3
 8002614:	688a      	ldr	r2, [r1, #8]
 8002616:	690b      	ldr	r3, [r1, #16]
 8002618:	4606      	mov	r6, r0
 800261a:	4293      	cmp	r3, r2
 800261c:	bfb8      	it	lt
 800261e:	4613      	movlt	r3, r2
 8002620:	f8c9 3000 	str.w	r3, [r9]
 8002624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002628:	460c      	mov	r4, r1
 800262a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800262e:	b112      	cbz	r2, 8002636 <_printf_common+0x2a>
 8002630:	3301      	adds	r3, #1
 8002632:	f8c9 3000 	str.w	r3, [r9]
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	0699      	lsls	r1, r3, #26
 800263a:	bf42      	ittt	mi
 800263c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002640:	3302      	addmi	r3, #2
 8002642:	f8c9 3000 	strmi.w	r3, [r9]
 8002646:	6825      	ldr	r5, [r4, #0]
 8002648:	f015 0506 	ands.w	r5, r5, #6
 800264c:	d107      	bne.n	800265e <_printf_common+0x52>
 800264e:	f104 0a19 	add.w	sl, r4, #25
 8002652:	68e3      	ldr	r3, [r4, #12]
 8002654:	f8d9 2000 	ldr.w	r2, [r9]
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	42ab      	cmp	r3, r5
 800265c:	dc29      	bgt.n	80026b2 <_printf_common+0xa6>
 800265e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	3300      	adds	r3, #0
 8002666:	bf18      	it	ne
 8002668:	2301      	movne	r3, #1
 800266a:	0692      	lsls	r2, r2, #26
 800266c:	d42e      	bmi.n	80026cc <_printf_common+0xc0>
 800266e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002672:	4639      	mov	r1, r7
 8002674:	4630      	mov	r0, r6
 8002676:	47c0      	blx	r8
 8002678:	3001      	adds	r0, #1
 800267a:	d021      	beq.n	80026c0 <_printf_common+0xb4>
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	68e5      	ldr	r5, [r4, #12]
 8002680:	f003 0306 	and.w	r3, r3, #6
 8002684:	2b04      	cmp	r3, #4
 8002686:	bf18      	it	ne
 8002688:	2500      	movne	r5, #0
 800268a:	f8d9 2000 	ldr.w	r2, [r9]
 800268e:	f04f 0900 	mov.w	r9, #0
 8002692:	bf08      	it	eq
 8002694:	1aad      	subeq	r5, r5, r2
 8002696:	68a3      	ldr	r3, [r4, #8]
 8002698:	6922      	ldr	r2, [r4, #16]
 800269a:	bf08      	it	eq
 800269c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026a0:	4293      	cmp	r3, r2
 80026a2:	bfc4      	itt	gt
 80026a4:	1a9b      	subgt	r3, r3, r2
 80026a6:	18ed      	addgt	r5, r5, r3
 80026a8:	341a      	adds	r4, #26
 80026aa:	454d      	cmp	r5, r9
 80026ac:	d11a      	bne.n	80026e4 <_printf_common+0xd8>
 80026ae:	2000      	movs	r0, #0
 80026b0:	e008      	b.n	80026c4 <_printf_common+0xb8>
 80026b2:	2301      	movs	r3, #1
 80026b4:	4652      	mov	r2, sl
 80026b6:	4639      	mov	r1, r7
 80026b8:	4630      	mov	r0, r6
 80026ba:	47c0      	blx	r8
 80026bc:	3001      	adds	r0, #1
 80026be:	d103      	bne.n	80026c8 <_printf_common+0xbc>
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c8:	3501      	adds	r5, #1
 80026ca:	e7c2      	b.n	8002652 <_printf_common+0x46>
 80026cc:	2030      	movs	r0, #48	; 0x30
 80026ce:	18e1      	adds	r1, r4, r3
 80026d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026da:	4422      	add	r2, r4
 80026dc:	3302      	adds	r3, #2
 80026de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026e2:	e7c4      	b.n	800266e <_printf_common+0x62>
 80026e4:	2301      	movs	r3, #1
 80026e6:	4622      	mov	r2, r4
 80026e8:	4639      	mov	r1, r7
 80026ea:	4630      	mov	r0, r6
 80026ec:	47c0      	blx	r8
 80026ee:	3001      	adds	r0, #1
 80026f0:	d0e6      	beq.n	80026c0 <_printf_common+0xb4>
 80026f2:	f109 0901 	add.w	r9, r9, #1
 80026f6:	e7d8      	b.n	80026aa <_printf_common+0x9e>

080026f8 <_printf_i>:
 80026f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002700:	460c      	mov	r4, r1
 8002702:	7e09      	ldrb	r1, [r1, #24]
 8002704:	b085      	sub	sp, #20
 8002706:	296e      	cmp	r1, #110	; 0x6e
 8002708:	4617      	mov	r7, r2
 800270a:	4606      	mov	r6, r0
 800270c:	4698      	mov	r8, r3
 800270e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002710:	f000 80b3 	beq.w	800287a <_printf_i+0x182>
 8002714:	d822      	bhi.n	800275c <_printf_i+0x64>
 8002716:	2963      	cmp	r1, #99	; 0x63
 8002718:	d036      	beq.n	8002788 <_printf_i+0x90>
 800271a:	d80a      	bhi.n	8002732 <_printf_i+0x3a>
 800271c:	2900      	cmp	r1, #0
 800271e:	f000 80b9 	beq.w	8002894 <_printf_i+0x19c>
 8002722:	2958      	cmp	r1, #88	; 0x58
 8002724:	f000 8083 	beq.w	800282e <_printf_i+0x136>
 8002728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800272c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002730:	e032      	b.n	8002798 <_printf_i+0xa0>
 8002732:	2964      	cmp	r1, #100	; 0x64
 8002734:	d001      	beq.n	800273a <_printf_i+0x42>
 8002736:	2969      	cmp	r1, #105	; 0x69
 8002738:	d1f6      	bne.n	8002728 <_printf_i+0x30>
 800273a:	6820      	ldr	r0, [r4, #0]
 800273c:	6813      	ldr	r3, [r2, #0]
 800273e:	0605      	lsls	r5, r0, #24
 8002740:	f103 0104 	add.w	r1, r3, #4
 8002744:	d52a      	bpl.n	800279c <_printf_i+0xa4>
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6011      	str	r1, [r2, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	da03      	bge.n	8002756 <_printf_i+0x5e>
 800274e:	222d      	movs	r2, #45	; 0x2d
 8002750:	425b      	negs	r3, r3
 8002752:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002756:	486f      	ldr	r0, [pc, #444]	; (8002914 <_printf_i+0x21c>)
 8002758:	220a      	movs	r2, #10
 800275a:	e039      	b.n	80027d0 <_printf_i+0xd8>
 800275c:	2973      	cmp	r1, #115	; 0x73
 800275e:	f000 809d 	beq.w	800289c <_printf_i+0x1a4>
 8002762:	d808      	bhi.n	8002776 <_printf_i+0x7e>
 8002764:	296f      	cmp	r1, #111	; 0x6f
 8002766:	d020      	beq.n	80027aa <_printf_i+0xb2>
 8002768:	2970      	cmp	r1, #112	; 0x70
 800276a:	d1dd      	bne.n	8002728 <_printf_i+0x30>
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	f043 0320 	orr.w	r3, r3, #32
 8002772:	6023      	str	r3, [r4, #0]
 8002774:	e003      	b.n	800277e <_printf_i+0x86>
 8002776:	2975      	cmp	r1, #117	; 0x75
 8002778:	d017      	beq.n	80027aa <_printf_i+0xb2>
 800277a:	2978      	cmp	r1, #120	; 0x78
 800277c:	d1d4      	bne.n	8002728 <_printf_i+0x30>
 800277e:	2378      	movs	r3, #120	; 0x78
 8002780:	4865      	ldr	r0, [pc, #404]	; (8002918 <_printf_i+0x220>)
 8002782:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002786:	e055      	b.n	8002834 <_printf_i+0x13c>
 8002788:	6813      	ldr	r3, [r2, #0]
 800278a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800278e:	1d19      	adds	r1, r3, #4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6011      	str	r1, [r2, #0]
 8002794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002798:	2301      	movs	r3, #1
 800279a:	e08c      	b.n	80028b6 <_printf_i+0x1be>
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027a2:	6011      	str	r1, [r2, #0]
 80027a4:	bf18      	it	ne
 80027a6:	b21b      	sxthne	r3, r3
 80027a8:	e7cf      	b.n	800274a <_printf_i+0x52>
 80027aa:	6813      	ldr	r3, [r2, #0]
 80027ac:	6825      	ldr	r5, [r4, #0]
 80027ae:	1d18      	adds	r0, r3, #4
 80027b0:	6010      	str	r0, [r2, #0]
 80027b2:	0628      	lsls	r0, r5, #24
 80027b4:	d501      	bpl.n	80027ba <_printf_i+0xc2>
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e002      	b.n	80027c0 <_printf_i+0xc8>
 80027ba:	0668      	lsls	r0, r5, #25
 80027bc:	d5fb      	bpl.n	80027b6 <_printf_i+0xbe>
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	296f      	cmp	r1, #111	; 0x6f
 80027c2:	bf14      	ite	ne
 80027c4:	220a      	movne	r2, #10
 80027c6:	2208      	moveq	r2, #8
 80027c8:	4852      	ldr	r0, [pc, #328]	; (8002914 <_printf_i+0x21c>)
 80027ca:	2100      	movs	r1, #0
 80027cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027d0:	6865      	ldr	r5, [r4, #4]
 80027d2:	2d00      	cmp	r5, #0
 80027d4:	60a5      	str	r5, [r4, #8]
 80027d6:	f2c0 8095 	blt.w	8002904 <_printf_i+0x20c>
 80027da:	6821      	ldr	r1, [r4, #0]
 80027dc:	f021 0104 	bic.w	r1, r1, #4
 80027e0:	6021      	str	r1, [r4, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d13d      	bne.n	8002862 <_printf_i+0x16a>
 80027e6:	2d00      	cmp	r5, #0
 80027e8:	f040 808e 	bne.w	8002908 <_printf_i+0x210>
 80027ec:	4665      	mov	r5, ip
 80027ee:	2a08      	cmp	r2, #8
 80027f0:	d10b      	bne.n	800280a <_printf_i+0x112>
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	07db      	lsls	r3, r3, #31
 80027f6:	d508      	bpl.n	800280a <_printf_i+0x112>
 80027f8:	6923      	ldr	r3, [r4, #16]
 80027fa:	6862      	ldr	r2, [r4, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	bfde      	ittt	le
 8002800:	2330      	movle	r3, #48	; 0x30
 8002802:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002806:	f105 35ff 	addle.w	r5, r5, #4294967295
 800280a:	ebac 0305 	sub.w	r3, ip, r5
 800280e:	6123      	str	r3, [r4, #16]
 8002810:	f8cd 8000 	str.w	r8, [sp]
 8002814:	463b      	mov	r3, r7
 8002816:	aa03      	add	r2, sp, #12
 8002818:	4621      	mov	r1, r4
 800281a:	4630      	mov	r0, r6
 800281c:	f7ff fef6 	bl	800260c <_printf_common>
 8002820:	3001      	adds	r0, #1
 8002822:	d14d      	bne.n	80028c0 <_printf_i+0x1c8>
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	b005      	add	sp, #20
 800282a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800282e:	4839      	ldr	r0, [pc, #228]	; (8002914 <_printf_i+0x21c>)
 8002830:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002834:	6813      	ldr	r3, [r2, #0]
 8002836:	6821      	ldr	r1, [r4, #0]
 8002838:	1d1d      	adds	r5, r3, #4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6015      	str	r5, [r2, #0]
 800283e:	060a      	lsls	r2, r1, #24
 8002840:	d50b      	bpl.n	800285a <_printf_i+0x162>
 8002842:	07ca      	lsls	r2, r1, #31
 8002844:	bf44      	itt	mi
 8002846:	f041 0120 	orrmi.w	r1, r1, #32
 800284a:	6021      	strmi	r1, [r4, #0]
 800284c:	b91b      	cbnz	r3, 8002856 <_printf_i+0x15e>
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	f022 0220 	bic.w	r2, r2, #32
 8002854:	6022      	str	r2, [r4, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	e7b7      	b.n	80027ca <_printf_i+0xd2>
 800285a:	064d      	lsls	r5, r1, #25
 800285c:	bf48      	it	mi
 800285e:	b29b      	uxthmi	r3, r3
 8002860:	e7ef      	b.n	8002842 <_printf_i+0x14a>
 8002862:	4665      	mov	r5, ip
 8002864:	fbb3 f1f2 	udiv	r1, r3, r2
 8002868:	fb02 3311 	mls	r3, r2, r1, r3
 800286c:	5cc3      	ldrb	r3, [r0, r3]
 800286e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002872:	460b      	mov	r3, r1
 8002874:	2900      	cmp	r1, #0
 8002876:	d1f5      	bne.n	8002864 <_printf_i+0x16c>
 8002878:	e7b9      	b.n	80027ee <_printf_i+0xf6>
 800287a:	6813      	ldr	r3, [r2, #0]
 800287c:	6825      	ldr	r5, [r4, #0]
 800287e:	1d18      	adds	r0, r3, #4
 8002880:	6961      	ldr	r1, [r4, #20]
 8002882:	6010      	str	r0, [r2, #0]
 8002884:	0628      	lsls	r0, r5, #24
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	d501      	bpl.n	800288e <_printf_i+0x196>
 800288a:	6019      	str	r1, [r3, #0]
 800288c:	e002      	b.n	8002894 <_printf_i+0x19c>
 800288e:	066a      	lsls	r2, r5, #25
 8002890:	d5fb      	bpl.n	800288a <_printf_i+0x192>
 8002892:	8019      	strh	r1, [r3, #0]
 8002894:	2300      	movs	r3, #0
 8002896:	4665      	mov	r5, ip
 8002898:	6123      	str	r3, [r4, #16]
 800289a:	e7b9      	b.n	8002810 <_printf_i+0x118>
 800289c:	6813      	ldr	r3, [r2, #0]
 800289e:	1d19      	adds	r1, r3, #4
 80028a0:	6011      	str	r1, [r2, #0]
 80028a2:	681d      	ldr	r5, [r3, #0]
 80028a4:	6862      	ldr	r2, [r4, #4]
 80028a6:	2100      	movs	r1, #0
 80028a8:	4628      	mov	r0, r5
 80028aa:	f000 f837 	bl	800291c <memchr>
 80028ae:	b108      	cbz	r0, 80028b4 <_printf_i+0x1bc>
 80028b0:	1b40      	subs	r0, r0, r5
 80028b2:	6060      	str	r0, [r4, #4]
 80028b4:	6863      	ldr	r3, [r4, #4]
 80028b6:	6123      	str	r3, [r4, #16]
 80028b8:	2300      	movs	r3, #0
 80028ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028be:	e7a7      	b.n	8002810 <_printf_i+0x118>
 80028c0:	6923      	ldr	r3, [r4, #16]
 80028c2:	462a      	mov	r2, r5
 80028c4:	4639      	mov	r1, r7
 80028c6:	4630      	mov	r0, r6
 80028c8:	47c0      	blx	r8
 80028ca:	3001      	adds	r0, #1
 80028cc:	d0aa      	beq.n	8002824 <_printf_i+0x12c>
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	079b      	lsls	r3, r3, #30
 80028d2:	d413      	bmi.n	80028fc <_printf_i+0x204>
 80028d4:	68e0      	ldr	r0, [r4, #12]
 80028d6:	9b03      	ldr	r3, [sp, #12]
 80028d8:	4298      	cmp	r0, r3
 80028da:	bfb8      	it	lt
 80028dc:	4618      	movlt	r0, r3
 80028de:	e7a3      	b.n	8002828 <_printf_i+0x130>
 80028e0:	2301      	movs	r3, #1
 80028e2:	464a      	mov	r2, r9
 80028e4:	4639      	mov	r1, r7
 80028e6:	4630      	mov	r0, r6
 80028e8:	47c0      	blx	r8
 80028ea:	3001      	adds	r0, #1
 80028ec:	d09a      	beq.n	8002824 <_printf_i+0x12c>
 80028ee:	3501      	adds	r5, #1
 80028f0:	68e3      	ldr	r3, [r4, #12]
 80028f2:	9a03      	ldr	r2, [sp, #12]
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	42ab      	cmp	r3, r5
 80028f8:	dcf2      	bgt.n	80028e0 <_printf_i+0x1e8>
 80028fa:	e7eb      	b.n	80028d4 <_printf_i+0x1dc>
 80028fc:	2500      	movs	r5, #0
 80028fe:	f104 0919 	add.w	r9, r4, #25
 8002902:	e7f5      	b.n	80028f0 <_printf_i+0x1f8>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ac      	bne.n	8002862 <_printf_i+0x16a>
 8002908:	7803      	ldrb	r3, [r0, #0]
 800290a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800290e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002912:	e76c      	b.n	80027ee <_printf_i+0xf6>
 8002914:	08002ac9 	.word	0x08002ac9
 8002918:	08002ada 	.word	0x08002ada

0800291c <memchr>:
 800291c:	b510      	push	{r4, lr}
 800291e:	b2c9      	uxtb	r1, r1
 8002920:	4402      	add	r2, r0
 8002922:	4290      	cmp	r0, r2
 8002924:	4603      	mov	r3, r0
 8002926:	d101      	bne.n	800292c <memchr+0x10>
 8002928:	2300      	movs	r3, #0
 800292a:	e003      	b.n	8002934 <memchr+0x18>
 800292c:	781c      	ldrb	r4, [r3, #0]
 800292e:	3001      	adds	r0, #1
 8002930:	428c      	cmp	r4, r1
 8002932:	d1f6      	bne.n	8002922 <memchr+0x6>
 8002934:	4618      	mov	r0, r3
 8002936:	bd10      	pop	{r4, pc}

08002938 <memcpy>:
 8002938:	b510      	push	{r4, lr}
 800293a:	1e43      	subs	r3, r0, #1
 800293c:	440a      	add	r2, r1
 800293e:	4291      	cmp	r1, r2
 8002940:	d100      	bne.n	8002944 <memcpy+0xc>
 8002942:	bd10      	pop	{r4, pc}
 8002944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800294c:	e7f7      	b.n	800293e <memcpy+0x6>

0800294e <memmove>:
 800294e:	4288      	cmp	r0, r1
 8002950:	b510      	push	{r4, lr}
 8002952:	eb01 0302 	add.w	r3, r1, r2
 8002956:	d807      	bhi.n	8002968 <memmove+0x1a>
 8002958:	1e42      	subs	r2, r0, #1
 800295a:	4299      	cmp	r1, r3
 800295c:	d00a      	beq.n	8002974 <memmove+0x26>
 800295e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002962:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002966:	e7f8      	b.n	800295a <memmove+0xc>
 8002968:	4283      	cmp	r3, r0
 800296a:	d9f5      	bls.n	8002958 <memmove+0xa>
 800296c:	1881      	adds	r1, r0, r2
 800296e:	1ad2      	subs	r2, r2, r3
 8002970:	42d3      	cmn	r3, r2
 8002972:	d100      	bne.n	8002976 <memmove+0x28>
 8002974:	bd10      	pop	{r4, pc}
 8002976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800297a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800297e:	e7f7      	b.n	8002970 <memmove+0x22>

08002980 <_free_r>:
 8002980:	b538      	push	{r3, r4, r5, lr}
 8002982:	4605      	mov	r5, r0
 8002984:	2900      	cmp	r1, #0
 8002986:	d043      	beq.n	8002a10 <_free_r+0x90>
 8002988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800298c:	1f0c      	subs	r4, r1, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	bfb8      	it	lt
 8002992:	18e4      	addlt	r4, r4, r3
 8002994:	f7ff fce6 	bl	8002364 <__malloc_lock>
 8002998:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <_free_r+0x94>)
 800299a:	6813      	ldr	r3, [r2, #0]
 800299c:	4610      	mov	r0, r2
 800299e:	b933      	cbnz	r3, 80029ae <_free_r+0x2e>
 80029a0:	6063      	str	r3, [r4, #4]
 80029a2:	6014      	str	r4, [r2, #0]
 80029a4:	4628      	mov	r0, r5
 80029a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029aa:	f7ff bcdc 	b.w	8002366 <__malloc_unlock>
 80029ae:	42a3      	cmp	r3, r4
 80029b0:	d90b      	bls.n	80029ca <_free_r+0x4a>
 80029b2:	6821      	ldr	r1, [r4, #0]
 80029b4:	1862      	adds	r2, r4, r1
 80029b6:	4293      	cmp	r3, r2
 80029b8:	bf01      	itttt	eq
 80029ba:	681a      	ldreq	r2, [r3, #0]
 80029bc:	685b      	ldreq	r3, [r3, #4]
 80029be:	1852      	addeq	r2, r2, r1
 80029c0:	6022      	streq	r2, [r4, #0]
 80029c2:	6063      	str	r3, [r4, #4]
 80029c4:	6004      	str	r4, [r0, #0]
 80029c6:	e7ed      	b.n	80029a4 <_free_r+0x24>
 80029c8:	4613      	mov	r3, r2
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	b10a      	cbz	r2, 80029d2 <_free_r+0x52>
 80029ce:	42a2      	cmp	r2, r4
 80029d0:	d9fa      	bls.n	80029c8 <_free_r+0x48>
 80029d2:	6819      	ldr	r1, [r3, #0]
 80029d4:	1858      	adds	r0, r3, r1
 80029d6:	42a0      	cmp	r0, r4
 80029d8:	d10b      	bne.n	80029f2 <_free_r+0x72>
 80029da:	6820      	ldr	r0, [r4, #0]
 80029dc:	4401      	add	r1, r0
 80029de:	1858      	adds	r0, r3, r1
 80029e0:	4282      	cmp	r2, r0
 80029e2:	6019      	str	r1, [r3, #0]
 80029e4:	d1de      	bne.n	80029a4 <_free_r+0x24>
 80029e6:	6810      	ldr	r0, [r2, #0]
 80029e8:	6852      	ldr	r2, [r2, #4]
 80029ea:	4401      	add	r1, r0
 80029ec:	6019      	str	r1, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	e7d8      	b.n	80029a4 <_free_r+0x24>
 80029f2:	d902      	bls.n	80029fa <_free_r+0x7a>
 80029f4:	230c      	movs	r3, #12
 80029f6:	602b      	str	r3, [r5, #0]
 80029f8:	e7d4      	b.n	80029a4 <_free_r+0x24>
 80029fa:	6820      	ldr	r0, [r4, #0]
 80029fc:	1821      	adds	r1, r4, r0
 80029fe:	428a      	cmp	r2, r1
 8002a00:	bf01      	itttt	eq
 8002a02:	6811      	ldreq	r1, [r2, #0]
 8002a04:	6852      	ldreq	r2, [r2, #4]
 8002a06:	1809      	addeq	r1, r1, r0
 8002a08:	6021      	streq	r1, [r4, #0]
 8002a0a:	6062      	str	r2, [r4, #4]
 8002a0c:	605c      	str	r4, [r3, #4]
 8002a0e:	e7c9      	b.n	80029a4 <_free_r+0x24>
 8002a10:	bd38      	pop	{r3, r4, r5, pc}
 8002a12:	bf00      	nop
 8002a14:	20000090 	.word	0x20000090

08002a18 <_realloc_r>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	4607      	mov	r7, r0
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	460e      	mov	r6, r1
 8002a20:	b921      	cbnz	r1, 8002a2c <_realloc_r+0x14>
 8002a22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a26:	4611      	mov	r1, r2
 8002a28:	f7ff bc0a 	b.w	8002240 <_malloc_r>
 8002a2c:	b922      	cbnz	r2, 8002a38 <_realloc_r+0x20>
 8002a2e:	f7ff ffa7 	bl	8002980 <_free_r>
 8002a32:	4625      	mov	r5, r4
 8002a34:	4628      	mov	r0, r5
 8002a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a38:	f000 f814 	bl	8002a64 <_malloc_usable_size_r>
 8002a3c:	42a0      	cmp	r0, r4
 8002a3e:	d20f      	bcs.n	8002a60 <_realloc_r+0x48>
 8002a40:	4621      	mov	r1, r4
 8002a42:	4638      	mov	r0, r7
 8002a44:	f7ff fbfc 	bl	8002240 <_malloc_r>
 8002a48:	4605      	mov	r5, r0
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d0f2      	beq.n	8002a34 <_realloc_r+0x1c>
 8002a4e:	4631      	mov	r1, r6
 8002a50:	4622      	mov	r2, r4
 8002a52:	f7ff ff71 	bl	8002938 <memcpy>
 8002a56:	4631      	mov	r1, r6
 8002a58:	4638      	mov	r0, r7
 8002a5a:	f7ff ff91 	bl	8002980 <_free_r>
 8002a5e:	e7e9      	b.n	8002a34 <_realloc_r+0x1c>
 8002a60:	4635      	mov	r5, r6
 8002a62:	e7e7      	b.n	8002a34 <_realloc_r+0x1c>

08002a64 <_malloc_usable_size_r>:
 8002a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a68:	1f18      	subs	r0, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bfbc      	itt	lt
 8002a6e:	580b      	ldrlt	r3, [r1, r0]
 8002a70:	18c0      	addlt	r0, r0, r3
 8002a72:	4770      	bx	lr

08002a74 <_init>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr

08002a80 <_fini>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr
